<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[とある海賊版ダウンロードサイトの15万名ユーザーの情報収集と分析]]></title>
    <url>%2F2019%2F04%2F11%2F%E3%81%A8%E3%81%82%E3%82%8B%E6%B5%B7%E8%B3%8A%E7%89%88%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89%E3%82%B5%E3%82%A4%E3%83%88%E3%81%AE15%E4%B8%87%E5%90%8D%E3%83%A6%E3%83%BC%E3%82%B6%E3%81%AE%E6%83%85%E5%A0%B1%E5%8F%8E%E9%9B%86%E3%81%A8%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[123都合の上で、詳しいレポートの公開は伏せさせていただきます。もしレポートに興味がありましたら、個人情報ページのメールで私に連絡してください。 1. 目的とある海外の日本ゲーム海賊版ダウンロードサイトの新規ユーザーの登録数推移を判明したい。 そして、全部ユーザーのアカウントレベルや活躍のユーザー数などの情報も判明したい。 2. 方式2.1. データ収集データ収集はpythonで並列収集を行います。スレッドの数は10に設定しました。 自分が所有しているVpsで、三台同時にデータ収集を行いました。 具体な手順はユーザーページを取得し、DOM解析ライブライBeautiful Soupでページを解析し、必要のデータを抽出します。 2.2. データ保存ユーザー数はそこまで多くありませんので（20万以下）、今回はredisを使わずに、収集したデータをそのままmysqlに保存します。 2.3. データ可視化PowerBIで行います 3. 結果 プロジェクトが実行された時点(2017年10月)で、そのサイトのユーザー数は計15万ぐらいです。 成果の一つとして、そのサイトが建てられた時（2004年）から、2017年までのユーザー登録数推移を判明しました。下の図はその登録数の推移です。 この図から分かるように、眼立つくらいに、2016年8月21日と2017年7月28日に各千人以上の新規ユーザーがそのサイトに登録しました。 詳しく調査した結果は、 2016年8月21日はPS Vitaがハッキングされた日です。そして、PS Vitaをハッキングしたハッカーはツールをそのサイトに公開しました。 2017年7月28日はとある名作の発売日です。 また、ユーザーのランク分布や発言数の統計などもしました。こちらは都合の上で、詳しいレポートの公開は伏せさせていただきます。もしレポートに興味がありましたら、個人情報ページのメールで私に連絡してください。]]></content>
      <categories>
        <category>Data</category>
        <category>Data analysis</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>web crawler</tag>
        <tag>data visualization</tag>
        <tag>Copyright infringement</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[人類初] ブラックホールの輪郭撮影に成功 32Gbps 23.7PBのデータ量!]]></title>
    <url>%2F2019%2F04%2F10%2F%E4%BA%BA%E9%A1%9E%E5%88%9D-%E3%83%96%E3%83%A9%E3%83%83%E3%82%AF%E3%83%9B%E3%83%BC%E3%83%AB%E3%81%AE%E8%BC%AA%E9%83%AD%E6%92%AE%E5%BD%B1%E3%81%AB%E6%88%90%E5%8A%9F%2F</url>
    <content type="text"><![CDATA[今日の22時に、人類歴史初のブラックホール写真が公開されました。 ブラックホールの引力は強すぎて、光もブラックホールに吸い込まれますので、今までは一度も直接にブラックホールの写真を撮ったことがありません。 記者会見から見ると、写真を撮る手段は、世界に分布している望遠鏡8台を連携し、地球直径と同じレベルの望遠鏡ネットワークを作り、この望遠鏡ネットワークでM87銀河のブラックホール写真を撮りました。 この方法を知ったとき、「あれ、分散コンピューティングと似ているではありませんか？」と思いました。観測した時間は2017年4月5日~2017年4月14日です。そして、エンジニアとして、とても気になる点は望遠鏡1台のデータ発生率はなんと、32Gbps! つまり、9日間で発生したデータ量は 2.9PB*8=23.7PB ! だからデータ分析だけで、二年をかけましたね。 記者会見では詳しいデータの保存や処理の話をしていませんでしたので、どうやってデータを処理したのか本当に気になります。 最後にこちらは二年をかけたブラックホールの写真です。少し地味ですけど、何とか凄いと感じています。]]></content>
      <categories>
        <category>Data</category>
        <category>BigData</category>
      </categories>
      <tags>
        <tag>bigdata</tag>
        <tag>blackhole</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git tutorial]]></title>
    <url>%2F2019%2F04%2F09%2FGit-tutorial%2F</url>
    <content type="text"><![CDATA[A simple tutorial for Git 1. Base Information Configuration1Git config 1.1. Username Mailbox Configuration12Git config --global user.name 'username'Git config --global user.email 'mail@mail.com' Without --global, configuration information for the current project 1.2. View information1Git config --list List all configurations 1Git config user.name Display the specified configuration 1.3. Creating an alias for the commandThe git command is very long, it is annoying to complete the input every time, but create an alias for the command.1Git config --global alias.co checkout The above created an alias git co for git checkout. 2. Get or create a repository2.1. Creating a repository locally1Git init 2.2. Remote clone repository12Git clone xxxxxxGit clone xxxxxx alernative_name The latter can specify the folder name 3. Submit an update3.1. git file status not tracked not modified The file that has not been temporarily saved after modification has been modified, and the file will not be saved after the temporary file is submitted. The file that has been temporarily saved after the modification has been temporarily saved, and the file will not be saved until it is submitted. 3.1.1. Viewing the status of the current project file1234567$ git statusOn branch masterYour branch is up to date with 'origin/master'.Nothing to commit, working tree clean If there are no changes, it will be displayed like this The information output by git status is very detailed, and git status -s can output more simple and easy-to-read information.12345$ git status -sM README.mdA test.md 3.2. Tracking new files git addIf you create a new file in the project directory, such as test.md, run git status again.123456789101112$ git statusOn branch masterYour branch is up to date with 'origin/master'.Untracked files: (use "git add &lt;file&gt;..." to include in what will be committed) Test.mdNothing added to commit but untracked files present (use "git add" to track) The newly added test.md is displayed as untracked (Untracked). This will not save the file even if you submit git. It’s easy to track files:1Git add test.md The file status will then change to tracked. Submit again will save12345678910$ git statusOn branch masterYour branch is up to date with 'origin/master'.Changes to be committed: (use "git reset HEAD &lt;file&gt;..." to unstage) New file: test.md 3.3. Staging the modified file git addAfter the file is modified, it will not be saved if it is not temporarily stored. So you need to temporarily save the file to the staging area:1Git add modified_filename git add is a versatile command that can be used for tracking and for temporary storage. It is more appropriate to interpret this command as “adding content to the next commit” instead of “adding a file to the project.” 3.4. Ignore the file .gitignoreSome files don’t need to be added to version control, such as programming intermediate files or caches, so you need to ignore them. Although these files are not directly loaded with the git add track, they will not be added to the version control system, but the untracked files will be extremely lengthy. You can create a new file called .gitignore to ignore them.12*.bin*.[oa] All files ending with .bin, and files of .o and .a are ignored here. The syntax for .gitignore is as follows: # opening or empty behavior comment / ends with the specified directory / starts with no recursion ! starts with inversion and does not ignore Support for glob (a simplified regular expression used by the shell) * matches 0 or more arbitrary characters ? matches an arbitrary character [] matches internal characters once, such as [ab] matches a or b [az] [0-9] matches any character of az once, and so on ** matches any intermediate directory, such as a/**/z matches a/z a/ff/gg/z … 3.5. Submit an update to git commieIf all changes have been temporarily saved, then you can submit1Git commit After running, you will be asked to enter an update comment. If you feel too much trouble, you can choose to use1Git commit -m &apos;Bug Fix&apos; To enter information and submit it once After submitting, the information submitted will be displayed, including the branch, the share-1 value submitted this time, etc.123456$ git commitHint: Waiting for your editor to close the file...[master 41e970250] test modify 2 files changed, 1 insertion(+) Create mode 100644 test.md Remember, when you submit, you are taking a snapshot of the staging area. Anything that has not been temporarily saved remains in the modified state and can be included in version management on the next submission. Each time you run a commit operation, you take a snapshot of your project and you can return to this state later or compare it. 3.6. Temporary deposit submission in one goEvery commit must be git add and then git commit is too much trouble. You can use one command to achieve the same effect:1Git commi -a This command will automatically add all files that have been tracked** to the staging area. 3.7. Removing files from the projectIf you want to remove a file from your project, you need to do two things: Remove files Remove the file from the project’s tracked file be usable1Git rm A one-time agreement.If you do not use this command to delete the file directly, the changes to the deletion need to be submitted using git add or git rm. 3.7.1. Can’t remove?If the file is modified, but there is no commit submission, the file cannot be deleted. (If you do not submit, the content you modified cannot be saved, preventing the deletion from being completely lost after deletion.)At this point, if you must delete the use of -f:1Git rm -f 3.8. Moving files1Git mv oldfile newfile In fact, running git mv is equivalent to running the following three commands:123$ mv README.md README$ git rm README.md$ git add README Even if you perform the above three commands separately, Git will realize that this is a change of name. 4. Submit history view4.1. View the specified submission: via git showIf you want to see a specified submission pass1Git show submit share-1 value If the commit is associated with a tag, you can find the commit via the tag.1Git show v1.0 4.2. git log1Git log All submissions will be displayed in order from new to old.[Common options for git log] (https://bingohuang.gitbooks.io/progit2/content/02-git-basics/sections/viewing-history.html#log_options) 4.3. git log -p -2Show submitted content differences -2 shows the last two commits, -1 shows the last time, and so on You can also restrict the display of the last two weeks, one month, etc., refer to [limit git log output options] (https://bingohuang.gitbooks.io/progit2/content/02-git-basics/sections/viewing-history.html #limit_options) 4.4. git log --statIf you just want to see the summary statistics submitted, use this 4.5. git log --pretty=xxxDisplay the submission history in other formats. –pretty=oneline put each commit in one line short full fuller Custom formatCan also customize the formatSuch as123456Git log --pretty=format:"%h - %an, %ar : %s"Ca82a6d - Scott Chacon, 11 years ago : changed the verison number085bb3b - Scott Chacon, 11 years ago : removed unnecessary test codeA11bef0 - Scott Chacon, 11 years ago : first commit Specific meanings, refer to:Https://bingohuang.gitbooks.io/progit2/content/02-git-basics/sections/viewing-history.html#pretty_format 4.6. --graphCombine --graph to display commit history in ascii graphical form 1234567891011121314151617181920$ git log --graph* commit ca82a6dff817ec66f44342007202690a93763949 (HEAD -&gt; master, origin/master, origin/HEAD)| Author: Scott Chacon &lt;schacon@gmail.com&gt;| Date: Mon Mar 17 21:52:11 2008 -0700|| changed the verison number|* commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7| Author: Scott Chacon &lt;schacon@gmail.com&gt;| Date: Sat Mar 15 16:40:33 2008 -0700|| removed unnecessary test code|* commit a11bef06a3f659402fe7563abf99ad00de2209e6 Author: Scott Chacon &lt;schacon@gmail.com&gt; Date: Sat Mar 15 10:31:28 2008 -0700 First commit 5. Label TagA label that can be submitted to Commit for a . You can use this tag to mark a submission with a number of tags, such as: v1.0, V2.0 5.1. Listing labels12Git tagGit tag -l Can list all the labels Too many labels can use wildcard filter labels1Git tag -l &quot;v2.*&quot; 5.2. View the Commit associated with the labelThe .com show tagname can be used to view the commit associated with the tag. 5.3. Creating tags for current submissions12Git tag -a V1.0 -m "tag message" #This is creating a complex tagGit tag v1.2 #This creates a simple tag with only one text Created a V1.0 tag for the current commit 5.4. Creating tags for past submissions1Git tag -a V2.2 COMMIT share-1 value 5.5. Push tabLabels are not pushed to the server by default and need to be manually pushed.12Git push origin v1.5 # push the specified labelGit push origin --tags # push all tags 6. BranchWhat is a branch? The branch is actually the pointer, which is essentially just a variable pointer pointing to the submitted object. Not a specific line concept. As shown above, there are three commit objects, each of which has an arrow pointing to the parent commit object. Because each commit has its own parent commit, you only need to select the latest commit object to follow the commit object back to the entire commit process. For example, if we specify the c2b9e commit object, we can know that its parent commit is f30ab, the parent submit is 34ac2, and so on, and we have figured out the direction of the line. The same is true for 87ab2. So, the branch is actually a pointer to the latest commit object for these lines. The above picture master points to the line c2b9e, and the testing branch points to the line of 87ab2. The HEAD pointer points to the current location, which can point to a branch object, such as testingmaster, or to a commit object, such as:f30abc2b9e` 6.0.1. View the Commit object pointed to by each branch1Git log --oneline --decorate Use --decorate 6.1. Creating a delete branch123456Git branch testing # This creates a branch pointer to the commit you are currently in.Git branch testing &lt;the hash value of the commit pointed to by the branch&gt; # This creates a branch pointing to the specified hash value commitGit branch testing &lt;another branch&gt; # This creates a testing branch that points to the same commit as another branchA branch named `testing` was created above at the current location.Delete branch Git branch -d testing1234If it is currently on the branch you want to delete, the deletion will fail.## 7.2. Switching branches Git checkout testing1234567Switch the current branch to `testing` so that the `HEAD` pointer points to this branch.## 7.3. Creating and switching branches```bashGit checkout -b BRANCH_NAME 7.4. Commit commit on branchThe commit on the branch creates a new commit and then moves the branch pointer to the new commit Originally there are three branches on c2, master`hotfixiss53, when commit onhotfix,c4appears, and thehotfixbranch pointer is moved to the top,iss53` Reason. 7.5. Merge branch merge1Git merge target branch name Merge the target branch to the current branch. 7.6. Branch merge when encountering conflictsSometimes the merge operation will not be so smooth. If you make different changes to the same part of the same file in two different branches, Git can’t clean them cleanly. A new merge commit is not automatically created at this time. Git will pause and wait for you to resolve the conflict caused by the merge. These files waiting for conflict can be viewed with git status. Then open those files, any files that have to be resolved due to the merge conflict will be identified in the unmerged state. Such as1234567&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:index.html&lt;div id=&quot;footer&quot;&gt;contact : email.support@github.com&lt;/div&gt;=======&lt;div id=&quot;footer&quot;&gt; Please contact us at support@github.com&lt;/div&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; iss53:index.html This represents the version indicated by HEAD (that is, where your master branch is located, because you have checked out the branch when you ran the merge command) in the upper half of the section (======= The upper half), while the version indicated by the iss53 branch is in the lower half of =======. In order to resolve conflicts, you must choose to use one of the two parts split by =======, or you can merge them yourself. After resolving the conflict, mark it as resolved with git add, then git commit Fast Forward modeIf the public commit of the target branch and the current branch is the latest commit of the current branch when merging, git will enable the Fast Forward mode, which directly moves the branch pointer to the latest commit of the target branch. This will be quick and easy. But after this, the current branch and the target branch become the same line. Disable Fast ForwardWhen merging, bring --no-ff1Git merge --no-ff &lt;target branch&gt; When the Fask Forward mode is disabled, the merge branch will have a new commit. 7.6.1. Imaged merge tool1Git mergetool 7.7. Rebaserebase12Git rebase master # rebase the current branch to the masterGit rebase master topic # rebase the topic branch to the master Merge the current branch rebase onto the master branch. Use rebase as shown in the server branch.1Git rebase master As you can see, the new c3&#39;, c4&#39;, c10&#39; commits appear on the master branch. This means that changes to the file are submitted in accordance with c3 c4 c10, changes are made to the c9’ commit, and the server branch pointer is moved to the last c10’. 7.7.1. –onto UsageIf you use the command for this project:1Git rebase --onto master server client Means: “Remove the client branch, find the modifications after the common ancestor of the client branch and the server branch, and then repeat them on the master branch.” final effect: 8. Undo operation8.1. git commit --amend Modify the last commitAfter submitting, I found that I missed a file and did not submit it. What should I do?12$ git add forgotten_file$ git commit --amend --amend means to modify the last commit and merge the current changes into the last commit, which is equivalent to patching the last commit. 8.2. Deleting files from the staging areaModified the file, use git add to add the changes to the staging area, how to cancel the changes from the staging area?1Git reset HEAD FILENAME This command will delete the development file from the temporary storage area. 8.3. Undoing changesI modified the file, but I regret it. I want to restore the file to what it was before.1Git checkout -- FILENAME This command will ignore your modifications to the specified file and overwrite it from the last commit.This order is very dangerous 8.4. Recover deleted branchesIf you know the share-1 value of the commit that the branch originally points to, you only need to create a branch with the same name for the commit again.1Git branch &lt;branch name&gt; &lt;the hash value of the commit pointed to by the branch&gt; If you don’t know share-1, use reflog1Git reflog #远程仓库 Remote repository is a non-local and current repository does not matter another repository ** (in fact, the remote repository can also be local, as long as the repository is not related to the current repository is considered a remote repository) Think of the current project repository and remote repository as two independent, unrelated repositorys will be better understood There are many commits and branches in the local repository, and the remote repository can have no data. Unless you upload the specified data to a remote repository. The reverse is also the same. If you want to associate a remote repository with a local repository, you need to use git remote add Adding a remote repository to a project1Git remote add origin git@github.com:xxx/xxxx.git Reference to remote repositoryA remote repository has been added above with the address `git@github.com:xxx/xxxx.git`.To push data to this remote repository or to get the code in the repository is only needed1Git push git@github.com:xxx/xxxx.git This is to push the code to the specified remote repository, but it is too much trouble to enter the complete address each time, so we can give this address a unique name to remember, the place where the alias is specified is the one above.1Git remote add origin git@github.com:xxx/xxxx.git origin is an alias for remote repositories. Origin has no special meaning and can take any name. The origin is taken here simply because everyone is using this name, and it is also the default name of git, everyone is used to it. I am too lazy to change. After defining the alias, referencing the remote repository and branch becomes12OriginOrigin/branch fetch Get the latest information on remote repositoriesAfter the code is cloned from the remote repository, if someone updates the remote repository, the local remote repository commit code is old, you can get the latest code through fetch.1Git fetch origin At this time we just grabbed the latest code data from the remote and did not apply the latest code to the working directory. To apply the code you need to use merge to merge the remote repository code** into the local. 1Git merge origin/master Why not use git checkout origin/master If we use git checkout origin/master, since origin/master is a remote branch, it will not change. Because the remote branch is only pushed through git push. So the result is that if checkout is on origin/master and the update is submitted above, then this update will not be subordinate to any local branch, which will cause the commit to be lost after cutting to another place. Or create a local branch on the origin/master branch:123456Git branch myb origin/masterGit checkout mybOrGit -b myb origin/master This usage refers to the syntax created by the previous branch. This creates a local branch myb pointing to origin/master with the commit object. Tracking branches and pullEvery time we update the code remotely, we have to fetch it down and then merge it with merge, which is very troublesome. There is an easy way to do this all at once, that is, to associate a local branch with a remote branch. Getting data from the local branch is automatically merged. Tracking branchThe local branch and remote branch association methods are the above12Git branch myb origin/masterGit checkout myb This local myb branch is associated with the remote origin/master branch. Or can be simplified to1Git checkout --track origin/master The local master branch is automatically associated with the origin/master branch.Change the remote branch associated with the local branch, using:12Git branch -u origin/devGit branch --set-upstream-to origin/dev When the trace branch is set, it can be referenced by the @{upstream} or @{u} shortcut. List tracking information for all branches1Git branch -vv git pullgit pull = git fetch tracked branch + git merge tracked branch PushWe don’t want to push all the branches and commits in the local repository to the remote repository when pushing. So when you push, we have to specify what to push to the remote repository. 123Git push remote repository local branch name: remote branch nameGit push origin master This code function is to push the local mster branch to the master branch of the origin remote repository. If you want to customize the branch name of the remote repository1Git push origin master:lululu This is to push the local mster branch to the lululu branch of the origin remote repository. Deleting branches in a remote repository1Git push origin --delete serverfix Removed branch serverfix on the server Push tabBy default, the git push command does not pass tags to the remote repository server. After creating the tag you must explicitly push the tag to the shared server.123Git push origin v1.5Git push origin --tags # This will transfer all the tags that are not on the remote repository server. Github useCreate ssh key1Ssh-keygen -t rsa -C "youremail@example.com" After returning all the way, two files id_rsa and id_rsa.pub will be generated in the personal directory. Github Add ssh public keyIn the github settings, paste the id_rsa.pub public key into it. Testing ssh linksWhenever git’s ssh link is used, the private key id_rsa private key in the .ssh directory is automatically called.1Ssh -T git@github.com 9. Appendix9.1. The underlying objectA Commit corresponds to a commit submission object. There are several small objects under this submission object. As shown, a commit object contains a tree object to record the directory structure of the following file snapshot. A tree object records a bunch of blob objects (the blob object is a file snapshot). The above image is the first commit when creating the project, there is no parent commit object. The commit after the first commit has a parent object, as shown in the figure: 10. Othersgit ignore specific filesHttps://hiberabyss.github.io/2018/03/03/git-ignore-specific-file/]]></content>
      <categories>
        <category>Version Control</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>English</tag>
        <tag>tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Go language learning note for C programer]]></title>
    <url>%2F2019%2F04%2F09%2FGo-language-learning-Note%2F</url>
    <content type="text"><![CDATA[This is a Go language learning note for C programer. You can use this note to quickly learn Go. 1. Grammar1.1. Constant1Const var [TYPE] = xxx Const can not specify the type, it will be automatically judged at compile time. Define multiple constants that can be written as one line1Const Jan, Feb, Mar, App = 1, 2, 3, 4 Can also take the following form1234Const ( Jan, Feb = 1, 2 Mar, App = 3, 4) Combined enumeration12345Const ( Jan = 1 Feb = 2 // ...) If the enumeration is in the form of 0 1 2 3, you can use iota12345Const ( Jan = iota Feb Mar) Constants have no length limit, such as1Const a = 1.2321390234804823094802348238402340234092384204 1.2. VariablesDefine the variable keyword as var format as1234Var name [TYPE] [= xxx]Such as:Var a intVar b float = 19.8 All memory is initialized in Go, so defining variables can not be assigned initial values. If the initial value is not assigned, the initial value of the corresponding type is assigned. int -&gt; 0 float -&gt; 0.0 bool -&gt; false string -&gt; ‘’ pointer -&gt; nil Note that it is an error to just declare a variable but not compile it with a variable. This is the embodiment of the idea that the go language does not need to be defined. But one exception is that global variables can be declared but not used If the compiler can determine the variable type based on the initial value when compiling, you can not specify the variable type, such as:123Var a = 100Var hello = 'nihao'Var HOME = os.Getenv("HOME") But if the compiler can’t judge the format, it will report an error, such as1Var a // no initial value or no specified type As with constants, multiple variable declarations can be written as one line or as one-time assignments.123Var a, b, c, d intVar a, b, c, d = 1, 2, 3, 4// abcd is int type There is also a simple way to declare variables :=123a := 1b := falseName := &apos;bob&apos; Equivalent to var a = 1 Of course, the declaration + assignment in a row is also easy to accomplish.1a, b, c, d := 1, 2, 3, 4 If it has been declared, it can be batch-valued in a row like python.1a, b, c, d = 200, 201, 202, 203 This is similar to python’s unpack, called parallel assignment in go, which makes it easy to exchange variable values.12345a, b := 100, 200a, b = b, a // a=200, b=100// can also unpack the return value of the functiona, b = func1() 1.2.1. _ variableGo has a special variable _, which can be assigned the same value as an ordinary variable, but can’t get the value (that is, it can only be written, not readable) The purpose of this variable is to discard some unneeded variables (because the variable definition in go must be used, otherwise it will report an error, but in fact some variables will not be used, such as the return value of the function) Such as:12_, b = 100, 200_, b = func1() 1.2.2. init() functionGo has a special function called init(), which cannot be called manually. It will be called automatically after the package has finished initializing. It can be used to initialize global variables. The execution priority of this function is very high, even before main(), so one possible use is to verify or repair the data before starting the program to ensure the correctness of the program state.123456789Package transImport "math"Var Pi float64Func init() &#123; Pi = 4 * math.Atan(1) // init() function computes Pi&#125; Or determine the type of operating system1234567Func init() &#123; If runtime.GOOS == "windows" &#123; Prompt = fmt.Sprintf(prompt, "Ctrl+Z, Enter") &#125; else &#123; //Unix-like Prompt = fmt.Sprintf(prompt, "Ctrl+D") &#125;&#125; 1.3. Pointer1.3.1. Addressing &amp;Use &amp; to get the memory address corresponding to the variable12a := 100fmt.Print( &amp;a ) 1.4. Types and operationsGo is a strongly typed language that does not allow any form of implicit type conversion, such as binary operators that only allow two variables of the same type to be evaluated **Note: Int32 unt64 is also not allowed to perform operations without conversion. But the constant limit is loose, such as:12Var a int64 = 20a = a + 10 Because 10 is a constant written in the code, it will not compile error 1.4.1. bool type and operationGo uses false true as the result of the bool operationThe logical connection symbol is the same as c: &amp;&amp; versus || or ! The comparison also has == != &gt; 1234As with Python, when connecting multiple logical operations with `&amp;&amp;` `||`, if a condition can already produce the result of the entire operation, there is no need to calculate the following expression, such as:```go1&lt;100 || 2&gt; 400 Because 1&lt;100 is true, the result of the expression is true, and the following 2&gt;400 will not be executed. 1.4.2. Number Types and OperationsInteger: int uint uintptr. These types are architecture-based, that is, the corresponding number of bits is automatically used depending on the environment in which they are run. On 32-bit systems, int uses int32, on 64-bit systems, int uses int64. uintptr is long enough to hold a pointer. int8 int16 int32 int64 uint8 uint16 uint32 uint64 These are independent of the architecture and have a certain length. byte byte is actually int8, which is used to represent ASCII characters. plural: Go native support plural complex64 (32-bit real number + 32-bit imaginary number) complex128 (64-bit real number + 64-bit imaginary number) The plural definition iI in the form of real + imi represents the root number -1: 1Var c1 complex128 = 1 + 10i To get the imaginary part of the real number of imaginary numbers, use real() imag() floating point: float32 (accurate to 7 decimal places) float64 (accurate to 15 decimal places) Because of the accuracy problem, be careful when comparing decimals Also try to use float64 because the math package is used for this divided by 0 Dividing an integer by 0 will cause a crash or the compilation will fail, and the floating point divided by 0 will get +∞Use +Inf for program 1.4.2.1. OperationArithmetic operator: + - * / % At the same time, like c, it also supports: ++ -- += -= *= /= %= note: ++ -- is self-increase and decrement, only acts on the variable itself, cannot be assigned, such as:1Var a = i++ 1.4.3. Character type1Var a byte = 'A' Like c, go’s character type byte is actually just an alias for int8 (typeof byte int8) So you can use the corresponding ASCII value directly1234Var a byte = 32Var b int8 = 33Var c byte = '\x41' // \x followed by 2 digits expressed as hexadecimal valueVar d byte = '\x377' // \x followed by a 3-digit number as an octal value 1.4.3.1. Unicode( UTF-8 )Go native support for unicode, starting with \u \U Because unicode requires multiple bytes to represent characters, the short one may be 2 bytes, the long pit is 4 bytes, corresponding to the specific int type is int16 int32. Which type is used specifically, by \u \U, \u is 2 bytes (int16), \U is 4 bytes (int32) 12Var ch int = '\u0041' //2 bytes unicodeVar ch2 int = '\U00101234' //4 bytes unicode unicode output %c output unicode characters %d %v outputs the decimal value corresponding to the unicode code %X output hexadecimal unicode code %U outputs unicode code in U+xxxx format unicode package There are some convenient methods in the unicode package: Is it a letter: unicode.IsLetter(ch) Is it a number: unicode.IsDigit(ch) Is it a blank symbol: unicode.IsSpace(ch) 1.4.4. In hexadecimalSame as c 0 starts with octal 0x starts with hexadecimal e 10 nth power (1e5 = 1*10^5) 1.4.5. Bit operationCan only be used for integers and needs to be equal in length. Bit &amp; &amp; And&amp; is similar to logical operation 1 is ture 0 is false bit or | And logical operations || Similar 1 is true 0 is false Bit XOR or ^ The equality of the two results is 0, not equal to 1, such as: 121 ^ 1 = 01 ^ 0 = 1 Bit clear &amp;^ The value at the specified location is set to 0 Bit left shift &lt;&lt; Usage: a &lt;&lt; n Indicates that a shifts the n bit to the left, the overflow is discarded, and the insufficient portion is filled with `0’. Use of left shift Shift one bit by a considerable number of times by 2^1, and shifting the n bit to the left is equivalent to multiplying the number by 2^n. The left shift operation speed is faster than the simple multiplication method, so when calculating a*2^n, it can be written as a &lt;&lt; n Because of this feature of left shift, you can quickly calculate the specific number of bytes of KB MB GB and so on: 1KB = 1 * 2^10 can be written as 1 &lt;&lt; 10 1MB = 1 * 2^20 can be written as 1 &lt;&lt; 20 1GB = 1 * 2^30 can be written as 1 &lt;&lt; 30 TB PB and so on Bit right shift &gt;&gt; Usage: a &gt;&gt; n Contrary to the left shift, shift n bits to the right. The same is the overflow part is discarded, the insufficient part is filled with 0 The meaning is also opposite to the left shift. The left shift n bits is a*2^n, and the right shift is a/2^n. 1.4.6. Display type conversionBy calling the method of the corresponding type, int32() int64() etc.Such as:12345678910Package mainImport "fmt"Func main() &#123; Var n int16 = 34 Var m int32 m = int32(n)&#125; Type conversion when defining:1a := uint64(0) 1.4.7. Operator precedence Priority Operator 7 ^ ! 6 * / % &lt;&lt; &gt;&gt; &amp; &amp;^ 5 + - ^ 4 == != &lt; &lt;= &gt;= &gt; 3 &lt;- 2 &amp;&amp; 1 ` ` 2. StringLike c, the string of go is also an array of characters. Also supports transfer of strings \n \r However, unlike c\c++, the go string does not end with \0, but ends directly (this is similar to a dynamic language like python, the empty string is &quot;&quot;) 2.1. Comparison of strings== &gt; … etc. The operation is to achieve string comparison by byte comparison in memory. 2.2. String lengthString length (bytes) can be obtained by len() Unicode can have 1~4 bytes for a character. If you want to count the number of characters in utf-8, use utf8.RuneCountInString() in theunicode/utf-8` package. 2.3. String index valueBecause the string of go is an array, you can get the character of the string by means of an array.1Str[0] 2.4. String splicing +, +=Like python, go makes it easy to stitch strings. 12Str := "hello" + " world"Str += "!" noteAlthough the + splicing string is convenient, the efficiency is not very high. If you are splicing strings in a loop and have efficiency requirements, you can use the following methods: strings.Join() Or use the buffer string bytes.Buffer like c 2.5. strings packageThe strings package contains some basic operations on strings. Does it start with xxx strings.HasPrefix(s, prefix) Whether to end with xxx strings.HasSuffix(s, suffix) Whether to include strings.Contains(s, substr) Find the substring position strings.Index(s, substr). This finds the location where it first appears. Return -1 means not included strings.LastIndex(s, substr). This finds the last occurrence of the location. Return -1 means not included pointerLike c, go can also define pointers, 32-bit system pointers are 32 bits long, and 64-bit systems are 64 bits. But the pointer of go does not allow pointer arithmetic (such as ptr+1, ptr+2, will report an error. This is a bit like python, java pass reference) 12Var p *intVar p*int // This is also legal, but it is not recommended, because in complex expressions, it is easy to be mistaken for multiplication Addressing operation &amp;Like c, you can get the memory address of a variable &amp;a by &amp;:12Var a = 100Var bp *int = &amp;a note Cannot get constant or text address Value operation *Like c, use * in front of the pointer to get the pointer to the data in memory.123Var a = 100Var bp *int = &amp;afmp.Print(*bp) // output 100 By the *bp operation, the value of the corresponding a variable can be changed. ContralJudgingif else1234567891011If condition &#123; // The () symbol on both sides of the judgment condition can be omitted. If the condition is more complicated, it can be taken.&#125;else if condition &#123; // else must be with the brackets&#125; consent level, // &#125; // else&#123; / / The above is not allowed by the go, the compiler will report an error&#125;else&#123;&#125; Or go has a way of writing, you can run an initialization statement first, and then judge, such as:123If initialized; condition &#123; // The variable defined in the initialization is a local variable, only in the entire if code block (including else)&#125; This can be used to get a one-time initial value.1234567If value := func1(data); value &gt; 100 &#123; // The value here is a local variable&#125;// orIf value, ok := readData(); ok&#123; Value // operation on value&#125; *if some useful ways Determine if the string is empty if str == &quot;&quot; or if len(str)==0 switchSame as c‘s `switch’123456789101112131415Switch variable &#123; Case value 1: // Unlike c, go will exit the entire switch block after executing a case. // If you want to continue with c, you can use fallthrouth to execute to the next case. Fallthrough //The code inside the switch does not need to use curly braces Case value 2: // If the code has only one line, it can be written like this case like this Case value 3, value 4, value 5: / / Can test multiple values ​​like this // Manually jump out of the entire switch and use break like c Break Default: // The position of defalut is actually indifferent. It doesn't matter where it is placed. But it is best to put the following&#125; There is also a way to write switch, which is to provide variables for judgment. All judgments are done in case.12345678910Switch &#123; Case value &lt;0: // code Case value == 0: // code Case value &gt; 0: //code Default: //code&#125; This is actually the same as if else if else, but when there are a lot of else if conditions, the switch is more readable. switch The third way to write an initialization statement like if12345678Switch initialization &#123; Case val1: ... Case val2: ... Default: ...&#125; for loopThe loop of go is only for 普通 Usage: Counter iterationThis is very similar to the for usage of c:123For i:=0; i&lt;10; i++&#123;&#125; But go also supports multiple counters123For i, j:=0,N; i&lt;j, i,j=i+1, j-1&#123;&#125; ###类while usageWhen you don’t need to initialize variables, you can write for like you would write while123456i := 0For i&lt;100 &#123; // Of course, like c, it is written as: for ;i&lt;100; &#123;&#125; is also possible // However, this method will be corrected by gofmt to for i&lt;100 i++&#125; Infinite loop12345For i:=0;;i++&#123; If i&gt;100&#123; Break &#125;&#125; In this way, there is no infinite loop, and it is necessary to judge when the program is launched inside the program. Of course, it is okay to write for true{} directly. However, writing ‘for {}directly at this time is the same meaning, equivalent tofor true{}`. for rangeIt’s similar to looping on an iterator. But the difference is that you can get both idx and value Note: The value obtained for range is a copy of the corresponding value! Not a reference! Modifying the value cannot change the original value! Written as:123For idx, value := range ITEMS &#123;&#125; The more common usage is to iterate through the loop string (go’s string is unicode, but it can handle unicode characters correctly by range iteration)123For idx, char := range "Hello" &#123; fmt.Println(idx, char) // Note that the direct print char output is the int value of the string&#125; goto Never try to use goto! Because goto proved to be extremely bad code habits! Like c, goto can jump to the desired tag: note that goto can jump within the same function function go is a compiled language, all functions are automatically found at compile time, so the definition and calling order of the function does not matter. go language does not allow function overloading (because the matching type procedure for function overloading consumes performance) Unlike c c# and other languages, the go function supports returning multiple values. For example, a function that sends a message can return a message content object and a flag indicating whether the transmission was successful. go language does not provide default values ​​for formal parameters like python, and must provide the corresponding value each time.Function declaration123Func function name (parameter list) (return value type list) &#123; // function body&#125; example1234567891011Func add(a, b int) (int)&#123; Return a + b&#125;Func add_2(a, b int)(int, int, int)&#123; Return a, b, a+b&#125;Func fun1(a int, _ int) &#123; // Function parameters can also be used _&#125; If the return value list has only one return value, () can be omitted If there is no return value, the return value list can be omitted The function’s return value list can also be named like a formal parameter. The named variable is given the initial value. If you call return, there is no explicit return variable, it will automatically return the corresponding variable.123456Func add(a, b int)( return_a, return_b, result int)&#123; Return_a = a Return_b = b Result = a+b Return&#125; If you want to return multiple return values, you can use this method to make the reading point clearer. Passing values ​​and passing referencesLike c, go passes the default value (that is, copy) However, when a function is called, reference types such as slices, maps, interfaces, and channels are passed by reference by default (even if the pointer is not explicitly pointed out). The pass reference is actually the memory address of the passed variable. The formal parameter defined by the function needs to receive the pointer type of the corresponding format. The operation data is also the same as the pointer:123Func multiply(a, b int, reply *int) &#123; *reply = a * b&#125; Calling this function is also a pass pointer:12Var reply *intMultiply(10, 5, &amp;reply) variable length parameterWait for the array part to read and look back deferDefer is a bit like some language ‘finnaly` defer can register some operations. When the function’s return is called**, these operations will be executed. The common use is to close the file handle and so on. The mechanism of defer is similar to the registration mechanism, so the location of defer in the function does not matter. defer can be used multiple times in the same function, the execution order is the same as the stack, last in, first out 123456789101112131415Func func1()&#123; i := 0 Defer close_file() i++ Retrun&#125;Func func2()&#123; i := 0 Defer close_file1() Defer close_file2() // return, execute in the order of close_file2() -&gt; close_file1() i++ Retrun&#125; defer only supports one line. If you want to execute multiple statements, you can use anonymous functions:1234567891011121314151617Defer func() &#123; log.Printf("func1(%q) = %d, %v", s, n, err) log.Printf("over")&#125;()``` **defer application in debugging: enter, return tracking**Another common use of `defer` is to track the leaving function.```goFunc leave(s string)&#123; fmt.Println("Leave function: ",s)&#125;Func enter(s string)&#123; fmt.Println("You entered the function: ", s)&#125;Func func1()&#123; Enter("func1") Defer leave("func1") // some operations&#125; For example, if you write “enter”, you can write the above content more concisely:1234Func enter(s string) string&#123; fmt.Println("You entered the function: ", s) Return s&#125; In this way, entry and registration can be simplified to1Defer leave( enter("func1") ) defer application in debugging: output record parameters and return value The same reason~ recursionDon’t like recursion~ look again Callback (callback)Passing a function as a parameter to another function call is called callback (callback) The formal parameter of the receiving function, the type uses func (parameter list) to return the listrepresentation, such as123Func callback( f func(int, int) int )&#123; Return f(1, 2)&#125; The call is also very simple, just pass in the function name directly into it:1234Func A(a, b int) int&#123; Return a+b&#125;Callback( A ) An example of callback is the IndexFunc in the string package.The definition of IndexFunc is:123Func IndexFunc(s string, f func(c int) bool) int &#123; //... internally get the characters of string, then call f(c) to get the corresponding result&#125; So just write a judgment function with the corresponding formal parameters and return value:123456Func func1(c int) bool&#123; If c=='A'&#123; Return true &#125; Return false&#125; Anonymous functionFunctions without names are called anonymous functions. as follows:123Func (i int) int &#123; Return i*2&#125; Anonymous functions cannot exist alone, otherwise compilation errors will be reported, but anonymous functions can be called directly. By writing parentheses to the right of the braces 1234a := func (i int) int &#123; Return i*2&#125;(10)// Here is the formal parameter 10, and the function return value is assigned to the variable a An anonymous function can also be assigned to a variable, after which the variable can be called like a function.12345Func1 := func (i int) int &#123; Return i*2&#125;a := func1(100) ClosureSince an anonymous function can be assigned to a variable, it can naturally be returned as the return value of another function. One usage is to pass in different variables, use another function to generate new functions with different functions and return them as return values. This function that returns a function is called a factory function. As follows, it is a factory function that generates different suffixes:123456789Func MakeAddSuffix(suffix string) func(string) string &#123; Return func(name string) string &#123; If !strings.HasSuffix(name, suffix) &#123; Return name + suffix &#125; Return name &#125;&#125; Usage is as follows12addBmpSuffix := MakeAddSuffix(".bmp")Newfilename = addBmpSuffix("testfile") // newfilename = 'testfile.bmp' The returned function directly uses the variable suffix in the MakeAddSuffix function, which is called a closure. #Array and slice ArrayThe length of the array is deterministic, the length of the array must be constant Each element is initialized to the initial value of the corresponding type when the array is defined Array definition and initialization:12Var array1 [10]int// only defined, initialized by type defaults If you want to initialize when defining, use the form 3’int{1, 3, 5}.[3]int{1, 3, 5}` returns an array of length 3, content 1, 2, 3, which can be assigned to a variable:12345678/ / Define simultaneous initializationVar arrayAge = [5]int&#123;19,20,21,22,23&#125; // known length is 5, all initializedVar arrayAge = [5]int&#123;19&#125; // length 5, only initialize the first oneVar arrayAge = [...]int&#123;19,20,21,22,23&#125; //Define an array of length 5 and initialize allVar arrayAge = [5]int&#123;0:19, 4:23&#125; // Specify values ​​only for [0] and [4]Var arrayAgePtr = new([10]int) // This is similar to the way c++ is defined, but note that this method returns not the value of the array, but a pointer to the array. Like c, the array starts with 0 and the following index value Different from c If the reference is outside the length range, the compiler will report an error or throw an error when it runs. The array in go is a value, not a pointer to a memory like c The type of the array is not followed by member variables. For example, [10]int and [5]int are different array types. Array pass valueThe array in go is a value, not a pointer to a piece of memory like c So, when you assign an array from one variable to another, a copy occurs, as follows:123456Array1 := [4]intArray2 := array1Array2[0] = 100// array1 [0 0 0 0]// array2 [100 0 0 0] If you want to modify the value of an array, use the address operator &amp;:123456Array1 := [4]intArray2 := &amp;array1Array2[0] = 100// array1 &amp;[0 0 0 0]// array2 &amp;[100 0 0 0] note Because of the nature of the go array, the function parameter is also a copy of the received array. If you want to change the array, you need to define the parameter like the receive pointer:123Func func1(array1 *[10]int)&#123; // ...&#125; But in fact go is not commonly used this way, for arrays such things, go has a more flexible slice to perform the corresponding operations instead of arrays. Array TraversalSince the array traversal is using for1234// General way of writingFor i:=0; i&lt;len(array1); i++&#123; Array1[i] //.....&#125; 12345/ / Use for range For idx, value := range array1 &#123; Value // the value of for range is just a copy, the original value cannot be modified, so it is best to use idx Array1[idx]&#125; Array application: vectorGeometric points (or mathematical vectors) are a classic example of using arrays. To simplify the code you usually use an alias:12Type Vector3D [3]float32Var vec Vector3D Multidimensional ArraysThe same feeling as c:12Var a [2][2]intVar a = [2][2]int&#123; &#123;1,2&#125;, &#123;4,5&#125; &#125; SliceThe go slice concept is greatly influenced by python, which is very similar to the python slice. But the difference is that the go slice is a reference to the original array, and python is a copy. So if you want to pass the array and modify it in go, it is best to pass the slice of this array directly. Slice type [10]int This is an array type If there is no length, it is the type of slice: []TYPE , such as: []int, []string Creating a sliceThe following creates an empty slice, nil, with a length of 0, which can be assigned to any slice of type []int12/ / Directly define an empty slice variable slice of type [] intVar slice []int The following creates an array and puts a slice at the same time:12// First create an array of [5]ints, then return a slice pointing to this arraySlice := []int&#123;1,2,3,4,5&#125; The following creates a slice, slice1 slice length is end-start (3-1=2), contains the data of the start position, but does not contain the data of the end position. The second slice2 contains the entire array. 1234// Create a slice from an arrayVar array1 [5]int Slice1 := array1[1:3] // Create a slice of type []intSlice2 := array1[:] // start does not write to start, end does not write to end Because the slice contains start without the end feature, it makes:1Array1 == ( array1[:i] + array1[i:] ) Let’s create a slice with make() below. The make() creation slice is make(TYPE, len, cap ). The principle is to create an array and then return the slice created from this array. Note: make can only be used to generate slice, map, channel. And new is used to create all value types (array, structure, int, etc.), and new returns pointer.12Slice3 = make([]int, 50, 100)// First create an array of length 100, then return the slice of [0:50] to slice3 Sliced ​​capacity cap and slice recombination reslicecap refers to the length of the start position of the slice, to the total length of the end position of the original array. Such as:var array1 [10]int slice := array[1:3] , the length of slice slice1 is 3-1=2, capacity(cap) is original array length 10 - slice start Position 1 = 9 Since the capacity&#39; of the slice is larger than theslice length, the aboveslice1can be expanded. This is different from the slice ofpython`: The slice1 above is 2, which points to the [1] [2] position of the original array. Then change the length of the slice with the following code:12Slice2 = slice1[0:1]Slice1 = slice1[0:3] The new slice slice1 points to the [1] [2] [3] position of the original array slice2 is reduced to [1] Not only can you change the slice’s end to expand, but you can also change the start to change the position: 1Slice1 := slice[1:3] Slice1 changes from the original [1] [2] to the `[2] [3] pointing to the original array. 3. Basic functions3.1. Print Println Printf SprintfPrintln will automatically bring \n at the end, Print will notIf you want to use %d %f for formatted output like C, use Printf.1fmt.Printf("Hello, %v, a is %v", name, a) %v can automatically call the corresponding formatted output mode according to the variable typeYou can manually specify %d %f, etc. Sprintf returns the string as a function return value, not output Specific list %v automatically calls the output mode of the corresponding format %d integer, if you want to specify the length, use %2d similar to c %x %X hex %g floats retain decimals like c, %n.2g %f %e floating point number (the latter is output in the form of e) 3.2. Random numberThe rand package implements the generation of pseudo-random numbers. You can use the Seed(value) function to provide a seed for generating pseudo-random numbers. The function rand.Intn returns a pseudo-random number between [0, n) The functions rand.Float32 and rand.Float64 return pseudo-random numbers between [0.0, 1.0) 123456789101112131415161718192021222324Package mainImport ( "fmt" "math/rand" "time")Func main() &#123; For i := 0; i &lt; 10; i++ &#123; a := rand.Int() fmt.Printf("%d / ", a) &#125; For i := 0; i &lt; 5; i++ &#123; r := rand.Intn(8) fmt.Printf("%d / ", r) &#125; fmt.Println() // Set the seed here, using the current nanosecond Timens := int64(time.Now().Nanosecond()) rand.Seed(timens) For i := 0; i &lt; 10; i++ &#123; fmt.Printf("%2.2f / ", 100*rand.Float32()) &#125;&#125; Output 123816681689 / 1325201247 / 623951027 / 478285186 / 1654146165 /1951252986 / 2029250107 / 762911244 / 1372544545 / 591415086 / / 3 / 0 / 6 / 4 / 2 /22.10/ 65.77 / 65.89 / 16.85 / 75.56 / 46.90 / 55.24 / 55.95 / 25.58 / 70.61 /]]></content>
      <categories>
        <category>プログラミング</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>English</tag>
        <tag>tutorial</tag>
        <tag>Go</tag>
        <tag>C programer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[安全のしおり] WEP Wifiのパスワードをハッキングする]]></title>
    <url>%2F2018%2F01%2F09%2F%E5%AE%89%E5%85%A8%E3%81%AE%E3%81%97%E3%81%8A%E3%82%8A-Wifi-%E3%83%91%E3%82%B9%E3%83%AF%E3%83%BC%E3%83%89%E3%83%8F%E3%83%83%E3%82%AD%E3%83%B3%E3%82%B0%2F</url>
    <content type="text"><![CDATA[Wifiのセキュリティはいつも安全ではありません。 例えば、以前に使ったWEP認証方式は既に潰れています。かなり複雑なwifiパスワードを設定しても、WEP認証方式を採用したら、wifiは簡単にハッキングされます。 現在、新しい無線ルーターはもうWEPを採用しませんが、古いルーターはまだWEP採用しています。 巳を知り彼を知らば、百戦殆うからず。今回私は自分のルーターを例として、wifiパスワードをハッキングしてみます。 ツール Aircrack-ng かなり有名な、Wifiをハッキングするツールです。 Kali Linux 250を超えるペネトレーションテストソフトウェアがインストールされているLinuxディストリビューションです。その中にAircrack-ngも含まれています。Aircrack-ngを使いたいなら、このlinuxを勧めます。 準備 まずはKali Linuxをダウンロードします 次にHPの手順に従って、Kali LinuxをUSBに入れます パソコンのBIOSを設定し、Kali Linuxが存在しているUSBからLive CDの方式でKali Linuxを起動する。 rootアカウントのパスワードはtoor ハッキングを始める まずは文字端末を起動し、iwconfigで自分のパソコンのネットワークカードの名前を判明します。私の場合、ネットワークカードの名前はwlan0です。 次に、airmon-ng start wlan0で、ネットワークカードをMonitorモードに切り替えます。 もう一回iwconfigを実行する。ネットワークカードはもうMonitorモードになりました。そして、ネットワークカードの名前はwlan0monになりました。 airodump-ng wlan0monを実行し、ハッキングしたいwifiを探します この中に、一番大事なデータはBSSIDとCH(wifiが使ってるChannel)です。ハッキングしたいwifiのBSSIDとCHを記録します。 下のコマンドで、ハッキングしたいwifiの通信データを収集する 1airodump-ng -w データの保存先 --channel 上のAPのCH --bssid 上のBSSID wlan0mon 図の解説：上部はハッキングしたいwifi(AP)の情報です。下部はそのwifi(AP)につながってるデバイスのリストです（STATIONはつまりデバイスのMAC ADRESSです） 収集の作業は自動に行います。データをいっぱい集めたら（大体2万～十何万が必要です）、次のパスワードハッキング作業に進みます。 6. aircrack-ng データファイルでパスワードをハッキングします。収集したデータ量は多いなら、wifiパスワードはすぐにでます。 結言WEP認証方式はもうかなり不安全ですので、絶対にWEPを使わないでください。 今回私は情報安全を勉強するため、自分のWifiをハッキングしました。 しかし、他人のwifiをハッキングするのは法律違反です。絶対にこの方法を悪用しないでください。]]></content>
      <categories>
        <category>network security</category>
        <category>Wifi Hacking</category>
      </categories>
      <tags>
        <tag>wifi</tag>
        <tag>WEP</tag>
        <tag>password</tag>
        <tag>hack</tag>
      </tags>
  </entry>
</search>
