<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Thinking About Programming</title>
  
  <subtitle>光に向かって一歩でも進もうとしている限り、希望を失うことなどは断じて無い</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-09T11:02:18.777Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Tang Haowen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git tutorial</title>
    <link href="http://yoursite.com/2019/04/09/Git-tutorial/"/>
    <id>http://yoursite.com/2019/04/09/Git-tutorial/</id>
    <published>2019-04-09T10:47:48.000Z</published>
    <updated>2019-04-09T11:02:18.777Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>A simple tutorial for Git</p></blockquote><h1 id="1-Base-Information-Configuration"><a href="#1-Base-Information-Configuration" class="headerlink" title="1. Base Information Configuration"></a>1. Base Information Configuration</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git config</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="1-1-Username-Mailbox-Configuration"><a href="#1-1-Username-Mailbox-Configuration" class="headerlink" title="1.1. Username Mailbox Configuration"></a>1.1. Username Mailbox Configuration</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Git config --global user.name <span class="string">'username'</span></span><br><span class="line">Git config --global user.email <span class="string">'mail@mail.com'</span></span><br></pre></td></tr></table></figure><p>Without <code>--global</code>, configuration information for the current project</p><h2 id="1-2-View-information"><a href="#1-2-View-information" class="headerlink" title="1.2. View information"></a>1.2. View information</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git config --list</span><br></pre></td></tr></table></figure><p>List all configurations</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git config user.name</span><br></pre></td></tr></table></figure><p>Display the specified configuration</p><h2 id="1-3-Creating-an-alias-for-the-command"><a href="#1-3-Creating-an-alias-for-the-command" class="headerlink" title="1.3. Creating an alias for the command"></a>1.3. Creating an alias for the command</h2><p>The git command is very long, it is annoying to complete the input every time, but create an alias for the command.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git config --global alias.co checkout</span><br></pre></td></tr></table></figure></p><p>The above created an alias <code>git co</code> for <code>git checkout</code>.</p><h1 id="2-Get-or-create-a-repository"><a href="#2-Get-or-create-a-repository" class="headerlink" title="2. Get or create a repository"></a>2. Get or create a repository</h1><h2 id="2-1-Creating-a-repository-locally"><a href="#2-1-Creating-a-repository-locally" class="headerlink" title="2.1. Creating a repository locally"></a>2.1. Creating a repository locally</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git init</span><br></pre></td></tr></table></figure><h2 id="2-2-Remote-clone-repository"><a href="#2-2-Remote-clone-repository" class="headerlink" title="2.2. Remote clone repository"></a>2.2. Remote clone repository</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Git clone xxxxxx</span><br><span class="line">Git clone xxxxxx alernative_name</span><br></pre></td></tr></table></figure><p>The latter can specify the folder name</p><h1 id="3-Submit-an-update"><a href="#3-Submit-an-update" class="headerlink" title="3. Submit an update"></a>3. Submit an update</h1><h2 id="3-1-git-file-status"><a href="#3-1-git-file-status" class="headerlink" title="3.1. git file status"></a>3.1. git file status</h2><p><img src="https://bingohuang.gitbooks.io/progit2/content/02-git-basics/images/lifecycle.png" alt="img"></p><ul><li>not tracked</li><li>not modified</li><li>The file that has not been temporarily saved after modification has been modified, and the file will not be saved after the temporary file is submitted.</li><li>The file that has been temporarily saved after the modification has been temporarily saved, and the file will not be saved until it is submitted.</li></ul><h3 id="3-1-1-Viewing-the-status-of-the-current-project-file"><a href="#3-1-1-Viewing-the-status-of-the-current-project-file" class="headerlink" title="3.1.1. Viewing the status of the current project file"></a>3.1.1. Viewing the status of the current project file</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">On branch master</span><br><span class="line">Your branch is up to date with <span class="string">'origin/master'</span>.</span><br><span class="line"></span><br><span class="line">Nothing to commit, working tree clean</span><br></pre></td></tr></table></figure><p>If there are no changes, it will be displayed like this</p><p>The information output by <code>git status</code> is very detailed, and <code>git status -s</code> can output more simple and easy-to-read information.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git status -s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">M README.md</span><br><span class="line">A test.md</span><br></pre></td></tr></table></figure></p><h2 id="3-2-Tracking-new-files-git-add"><a href="#3-2-Tracking-new-files-git-add" class="headerlink" title="3.2. Tracking new files git add"></a>3.2. Tracking new files <code>git add</code></h2><p>If you create a new file in the project directory, such as <code>test.md</code>, run <code>git status</code> again.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">On branch master</span><br><span class="line">Your branch is up to date with <span class="string">'origin/master'</span>.</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line"></span><br><span class="line">        Test.md</span><br><span class="line"></span><br><span class="line">Nothing added to commit but untracked files present (use <span class="string">"git add"</span> to track)</span><br></pre></td></tr></table></figure></p><p>The newly added <code>test.md</code> is displayed as untracked (<code>Untracked</code>). This will not save the file even if you submit git.</p><p>It’s easy to track files:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git add test.md</span><br></pre></td></tr></table></figure></p><p>The file status will then change to tracked. Submit again will save<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">On branch master</span><br><span class="line">Your branch is up to date with <span class="string">'origin/master'</span>.</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)</span><br><span class="line"></span><br><span class="line">        New file: test.md</span><br></pre></td></tr></table></figure></p><h2 id="3-3-Staging-the-modified-file-git-add"><a href="#3-3-Staging-the-modified-file-git-add" class="headerlink" title="3.3. Staging the modified file git add"></a>3.3. Staging the modified file <code>git add</code></h2><p>After the file is modified, it will not be saved if it is not temporarily stored. So you need to temporarily save the file to the staging area:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git add modified_filename</span><br></pre></td></tr></table></figure></p><p><code>git add</code> is a versatile command that can be used for tracking and for temporary storage.</p><p><strong><em> It is more appropriate to interpret this command as “adding content to the next commit” instead of “adding a file to the project.” </em></strong></p><h2 id="3-4-Ignore-the-file-gitignore"><a href="#3-4-Ignore-the-file-gitignore" class="headerlink" title="3.4. Ignore the file .gitignore"></a>3.4. Ignore the file <code>.gitignore</code></h2><p>Some files don’t need to be added to version control, such as programming intermediate files or caches, so you need to ignore them.</p><p>Although these files are not directly loaded with the <code>git add</code> track, they will not be added to the version control system, but the untracked files will be extremely lengthy. You can create a new file called <code>.gitignore</code> to ignore them.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*.bin</span><br><span class="line">*.[oa]</span><br></pre></td></tr></table></figure></p><p>All files ending with <code>.bin</code>, and files of <code>.o</code> and <code>.a</code> are ignored here.</p><p>The syntax for .gitignore is as follows:</p><ul><li><code>#</code> opening or empty behavior comment</li><li><code>/</code> ends with the specified directory</li><li><code>/</code> starts with no recursion</li><li><code>!</code> starts with inversion and does not ignore</li><li>Support for glob (a simplified regular expression used by the shell)<ul><li><code>*</code> matches 0 or more arbitrary characters</li><li><code>?</code> matches an arbitrary character</li><li><code>[]</code> matches internal characters once, such as <code>[ab]</code> matches a or b</li><li><code>[az]</code> <code>[0-9]</code> matches any character of az once, and so on</li><li><code>**</code> matches any intermediate directory, such as <code>a/**/z</code> matches <code>a/z</code> <code>a/ff/gg/z</code> …</li></ul></li></ul><h2 id="3-5-Submit-an-update-to-git-commie"><a href="#3-5-Submit-an-update-to-git-commie" class="headerlink" title="3.5. Submit an update to git commie"></a>3.5. Submit an update to <code>git commie</code></h2><p>If all changes have been temporarily saved, then you can submit<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git commit</span><br></pre></td></tr></table></figure></p><p>After running, you will be asked to enter an update comment. If you feel too much trouble, you can choose to use<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git commit -m &apos;Bug Fix&apos;</span><br></pre></td></tr></table></figure></p><p>To enter information and submit it once</p><p>After submitting, the information submitted will be displayed, including the branch, the share-1 value submitted this time, etc.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git commit</span><br><span class="line"></span><br><span class="line">Hint: Waiting <span class="keyword">for</span> your editor to close the file...</span><br><span class="line">[master 41e970250] <span class="built_in">test</span> modify</span><br><span class="line"> 2 files changed, 1 insertion(+)</span><br><span class="line"> Create mode 100644 test.md</span><br></pre></td></tr></table></figure></p><p><strong><em>Remember, when you submit, you are taking a snapshot of the staging area. Anything that has not been temporarily saved remains in the modified state and can be included in version management on the next submission. Each time you run a commit operation, you take a snapshot of your project and you can return to this state later or compare it. </em></strong></p><h2 id="3-6-Temporary-deposit-submission-in-one-go"><a href="#3-6-Temporary-deposit-submission-in-one-go" class="headerlink" title="3.6. Temporary deposit submission in one go"></a>3.6. Temporary deposit submission in one go</h2><p>Every commit must be <code>git add</code> and then <code>git commit</code> is too much trouble. You can use one command to achieve the same effect:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git commi -a</span><br></pre></td></tr></table></figure></p><p>This command will automatically add all files that have been tracked** to the staging area.</p><h2 id="3-7-Removing-files-from-the-project"><a href="#3-7-Removing-files-from-the-project" class="headerlink" title="3.7. Removing files from the project"></a>3.7. Removing files from the project</h2><p>If you want to remove a file from your project, you need to do two things:</p><ol><li>Remove files</li><li>Remove the file from the project’s tracked file</li></ol><p>be usable<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git rm</span><br></pre></td></tr></table></figure></p><p>A one-time agreement.<br>If you do not use this command to delete the file directly, the changes to the deletion need to be submitted using <code>git add</code> or <code>git rm</code>.</p><h3 id="3-7-1-Can’t-remove"><a href="#3-7-1-Can’t-remove" class="headerlink" title="3.7.1. Can’t remove?"></a>3.7.1. Can’t remove?</h3><p>If the file is modified, but there is no commit submission, the file cannot be deleted. (If you do not submit, the content you modified cannot be saved, preventing the deletion from being completely lost after deletion.)<br>At this point, if you must delete the use of <code>-f</code>:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git rm -f</span><br></pre></td></tr></table></figure></p><h2 id="3-8-Moving-files"><a href="#3-8-Moving-files" class="headerlink" title="3.8. Moving files"></a>3.8. Moving files</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git mv oldfile newfile</span><br></pre></td></tr></table></figure><p>In fact, running git mv is equivalent to running the following three commands:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mv README.md README</span><br><span class="line">$ git rm README.md</span><br><span class="line">$ git add README</span><br></pre></td></tr></table></figure></p><p>Even if you perform the above three commands separately, Git will realize that this is a change of name.</p><h1 id="4-Submit-history-view"><a href="#4-Submit-history-view" class="headerlink" title="4. Submit history view"></a>4. Submit history view</h1><h2 id="4-1-View-the-specified-submission-via-git-show"><a href="#4-1-View-the-specified-submission-via-git-show" class="headerlink" title="4.1. View the specified submission: via git show"></a>4.1. View the specified submission: via <code>git show</code></h2><p>If you want to see a specified submission pass<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git show submit share-1 value</span><br></pre></td></tr></table></figure></p><p>If the commit is associated with a tag, you can find the commit via the tag.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git show v1.0</span><br></pre></td></tr></table></figure></p><h2 id="4-2-git-log"><a href="#4-2-git-log" class="headerlink" title="4.2. git log"></a>4.2. <code>git log</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><p>All submissions will be displayed in order from new to old.<br>[Common options for git log] (<a href="https://bingohuang.gitbooks.io/progit2/content/02-git-basics/sections/viewing-history.html#log_options" target="_blank" rel="noopener">https://bingohuang.gitbooks.io/progit2/content/02-git-basics/sections/viewing-history.html#log_options</a>)</p><h2 id="4-3-git-log-p-2"><a href="#4-3-git-log-p-2" class="headerlink" title="4.3. git log -p -2"></a>4.3. <code>git log -p -2</code></h2><p>Show submitted content differences</p><p>-2 shows the last two commits, -1 shows the last time, and so on</p><p>You can also restrict the display of the last two weeks, one month, etc., refer to [limit git log output options] (<a href="https://bingohuang.gitbooks.io/progit2/content/02-git-basics/sections/viewing-history.html" target="_blank" rel="noopener">https://bingohuang.gitbooks.io/progit2/content/02-git-basics/sections/viewing-history.html</a> #limit_options)</p><h2 id="4-4-git-log-stat"><a href="#4-4-git-log-stat" class="headerlink" title="4.4. git log --stat"></a>4.4. <code>git log --stat</code></h2><p>If you just want to see the summary statistics submitted, use this</p><h2 id="4-5-git-log-pretty-xxx"><a href="#4-5-git-log-pretty-xxx" class="headerlink" title="4.5. git log --pretty=xxx"></a>4.5. <code>git log --pretty=xxx</code></h2><p>Display the submission history in other formats.</p><ul><li>–pretty=oneline put each commit in one line</li><li>short full fuller </li></ul><p>Custom format<br>Can also customize the format<br>Such as<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Git <span class="built_in">log</span> --pretty=format:<span class="string">"%h - %an, %ar : %s"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Ca82a6d - Scott Chacon, 11 years ago : changed the verison number</span><br><span class="line">085bb3b - Scott Chacon, 11 years ago : removed unnecessary <span class="built_in">test</span> code</span><br><span class="line">A11bef0 - Scott Chacon, 11 years ago : first commit</span><br></pre></td></tr></table></figure></p><p>Specific meanings, refer to:<br>Https://bingohuang.gitbooks.io/progit2/content/02-git-basics/sections/viewing-history.html#pretty_format</p><h2 id="4-6-graph"><a href="#4-6-graph" class="headerlink" title="4.6. --graph"></a>4.6. <code>--graph</code></h2><p>Combine <code>--graph</code> to display commit history in ascii graphical form</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --graph</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* commit ca82a6dff817ec66f44342007202690a93763949 (HEAD -&gt; master, origin/master, origin/HEAD)</span><br><span class="line">| Author: Scott Chacon &lt;schacon@gmail.com&gt;</span><br><span class="line">| Date: Mon Mar 17 21:52:11 2008 -0700</span><br><span class="line">|</span><br><span class="line">| changed the verison number</span><br><span class="line">|</span><br><span class="line">* commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7</span><br><span class="line">| Author: Scott Chacon &lt;schacon@gmail.com&gt;</span><br><span class="line">| Date: Sat Mar 15 16:40:33 2008 -0700</span><br><span class="line">|</span><br><span class="line">| removed unnecessary <span class="built_in">test</span> code</span><br><span class="line">|</span><br><span class="line">* commit a11bef06a3f659402fe7563abf99ad00de2209e6</span><br><span class="line">  Author: Scott Chacon &lt;schacon@gmail.com&gt;</span><br><span class="line">  Date: Sat Mar 15 10:31:28 2008 -0700</span><br><span class="line"></span><br><span class="line">      First commit</span><br></pre></td></tr></table></figure><h1 id="5-Label-Tag"><a href="#5-Label-Tag" class="headerlink" title="5. Label Tag"></a>5. Label Tag</h1><p>A label that can be submitted to Commit<strong> for a </strong>.</p><p>You can use this tag to mark a submission with a number of tags, such as: <code>v1.0</code>, <code>V2.0</code></p><h2 id="5-1-Listing-labels"><a href="#5-1-Listing-labels" class="headerlink" title="5.1. Listing labels"></a>5.1. Listing labels</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Git tag</span><br><span class="line">Git tag -l</span><br></pre></td></tr></table></figure><p>Can list all the labels</p><p>Too many labels can use wildcard filter labels<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git tag -l &quot;v2.*&quot;</span><br></pre></td></tr></table></figure></p><h2 id="5-2-View-the-Commit-associated-with-the-label"><a href="#5-2-View-the-Commit-associated-with-the-label" class="headerlink" title="5.2. View the Commit associated with the label"></a>5.2. View the Commit associated with the label</h2><p>The .com show tagname can be used to view the commit associated with the tag.</p><h2 id="5-3-Creating-tags-for-current-submissions"><a href="#5-3-Creating-tags-for-current-submissions" class="headerlink" title="5.3. Creating tags for current submissions"></a>5.3. Creating tags for current submissions</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Git tag -a V1.0 -m <span class="string">"tag message"</span> <span class="comment">#This is creating a complex tag</span></span><br><span class="line">Git tag v1.2 <span class="comment">#This creates a simple tag with only one text</span></span><br></pre></td></tr></table></figure><p>Created a V1.0 tag for the current commit</p><h2 id="5-4-Creating-tags-for-past-submissions"><a href="#5-4-Creating-tags-for-past-submissions" class="headerlink" title="5.4. Creating tags for past submissions"></a>5.4. Creating tags for past submissions</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git tag -a V2.2 COMMIT share-1 value</span><br></pre></td></tr></table></figure><h2 id="5-5-Push-tab"><a href="#5-5-Push-tab" class="headerlink" title="5.5. Push tab"></a>5.5. Push tab</h2><p>Labels are not pushed to the server by default and need to be manually pushed.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Git push origin v1.5 <span class="comment"># push the specified label</span></span><br><span class="line">Git push origin --tags <span class="comment"># push all tags</span></span><br></pre></td></tr></table></figure></p><h1 id="6-Branch"><a href="#6-Branch" class="headerlink" title="6. Branch"></a>6. Branch</h1><p><strong>What is a branch? </strong><br>The branch is actually the <strong> pointer</strong>, which is essentially just a variable <strong> pointer</strong> pointing to the submitted object. Not a specific line concept.</p><p><img src="https://bingohuang.gitbooks.io/progit2/content/03-git-branching/images/advance-master.png" alt="img"></p><p>As shown above, there are three commit objects, each of which has an arrow pointing to the parent commit object. Because each commit has its own parent commit, you only need to select the latest commit object to follow the commit object back to the entire commit process.</p><p>For example, if we specify the <code>c2b9e</code> commit object, we can know that its parent commit is <code>f30ab</code>, the parent submit is <code>34ac2</code>, and so on, and we have figured out the direction of the line.</p><p>The same is true for <code>87ab2</code>.</p><p>So, the branch is actually a pointer to the latest commit object for these lines. The above picture <code>master</code> points to the line <code>c2b9e</code>, and the <code>testing</code> branch points to the line of <code>87ab2</code>.</p><p>The <code>HEAD</code> pointer points to the current location, which can point to a branch object, such as <code>testing</code>master<code>, or to a commit object, such as:</code>f30ab<code></code>c2b9e`</p><h3 id="6-0-1-View-the-Commit-object-pointed-to-by-each-branch"><a href="#6-0-1-View-the-Commit-object-pointed-to-by-each-branch" class="headerlink" title="6.0.1. View the Commit object pointed to by each branch"></a>6.0.1. View the Commit object pointed to by each branch</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git <span class="built_in">log</span> --oneline --decorate</span><br></pre></td></tr></table></figure><p>Use <code>--decorate</code></p><h2 id="6-1-Creating-a-delete-branch"><a href="#6-1-Creating-a-delete-branch" class="headerlink" title="6.1. Creating a delete branch"></a>6.1. Creating a delete branch</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Git branch testing <span class="comment"># This creates a branch pointer to the commit you are currently in.</span></span><br><span class="line">Git branch testing &lt;the <span class="built_in">hash</span> value of the commit pointed to by the branch&gt; <span class="comment"># This creates a branch pointing to the specified hash value commit</span></span><br><span class="line">Git branch testing &lt;another branch&gt; <span class="comment"># This creates a testing branch that points to the same commit as another branch</span></span><br><span class="line">A branch named `testing` was created above at the current location.</span><br><span class="line"></span><br><span class="line">Delete branch</span><br></pre></td></tr></table></figure><p>Git branch -d testing<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">If it is currently on the branch you want to delete, the deletion will fail.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 7.2. Switching branches</span><br></pre></td></tr></table></figure></p><p>Git checkout testing<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Switch the current branch to `testing` so that the `HEAD` pointer points to this branch.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 7.3. Creating and switching branches</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">Git checkout -b BRANCH_NAME</span><br></pre></td></tr></table></figure></p><h2 id="7-4-Commit-commit-on-branch"><a href="#7-4-Commit-commit-on-branch" class="headerlink" title="7.4. Commit commit on branch"></a>7.4. Commit commit on branch</h2><p>The commit on the branch creates a new commit and then moves the branch pointer to the new commit<br><img src="https://bingohuang.gitbooks.io/progit2/content/03-git-branching/images/basic-branching-4.png" alt="img"></p><p>Originally there are three branches on <code>c2</code>, <code>master`</code>hotfix<code></code>iss53<code>, when commit on</code>hotfix<code>,</code>c4<code>appears, and the</code>hotfix<code>branch pointer is moved to the top,</code>iss53` Reason.</p><h2 id="7-5-Merge-branch-merge"><a href="#7-5-Merge-branch-merge" class="headerlink" title="7.5. Merge branch merge"></a>7.5. Merge branch <code>merge</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git merge target branch name</span><br></pre></td></tr></table></figure><p>Merge the target branch to the current branch.</p><h2 id="7-6-Branch-merge-when-encountering-conflicts"><a href="#7-6-Branch-merge-when-encountering-conflicts" class="headerlink" title="7.6. Branch merge when encountering conflicts"></a>7.6. Branch merge when encountering conflicts</h2><p>Sometimes the merge operation will not be so smooth. If you make different changes to the same part of the same file in two different branches, Git can’t clean them cleanly.</p><p>A new merge commit is not automatically created at this time. Git will pause and wait for you to resolve the conflict caused by the merge.</p><p>These files waiting for conflict can be viewed with <code>git status</code>.</p><p>Then open those files, any files that have to be resolved due to the merge conflict will be identified in the unmerged state. Such as<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:index.html</span><br><span class="line">&lt;div id=&quot;footer&quot;&gt;contact : email.support@github.com&lt;/div&gt;</span><br><span class="line">=======</span><br><span class="line">&lt;div id=&quot;footer&quot;&gt;</span><br><span class="line"> Please contact us at support@github.com</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; iss53:index.html</span><br></pre></td></tr></table></figure></p><p>This represents the version indicated by HEAD (that is, where your master branch is located, because you have checked out the branch when you ran the merge command) in the upper half of the section (======= The upper half), while the version indicated by the iss53 branch is in the lower half of =======. In order to resolve conflicts, you must choose to use one of the two parts split by =======, or you can merge them yourself.</p><p>After resolving the conflict, mark it as resolved with <code>git add</code>, then <code>git commit</code></p><h3 id="Fast-Forward-mode"><a href="#Fast-Forward-mode" class="headerlink" title="Fast Forward mode"></a><code>Fast Forward</code> mode</h3><p>If the public <code>commit</code> of the target branch and the current branch is the latest <code>commit</code> of the current branch when merging, git will enable the <code>Fast Forward</code> mode, which directly moves the branch pointer to the latest commit of the target branch.</p><p>This will be quick and easy.</p><p>But after this, the current branch and the target branch become the same line.</p><h3 id="Disable-Fast-Forward"><a href="#Disable-Fast-Forward" class="headerlink" title="Disable Fast Forward"></a>Disable <code>Fast Forward</code></h3><p>When merging, bring <code>--no-ff</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git merge --no-ff &lt;target branch&gt;</span><br></pre></td></tr></table></figure></p><p>When the <code>Fask Forward</code> mode is disabled, the merge branch will have a new commit.</p><h3 id="7-6-1-Imaged-merge-tool"><a href="#7-6-1-Imaged-merge-tool" class="headerlink" title="7.6.1. Imaged merge tool"></a>7.6.1. Imaged merge tool</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git mergetool</span><br></pre></td></tr></table></figure><h2 id="7-7-Rebaserebase"><a href="#7-7-Rebaserebase" class="headerlink" title="7.7. Rebaserebase"></a>7.7. Rebase<code>rebase</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Git rebase master # rebase the current branch to the master</span><br><span class="line">Git rebase master topic # rebase the topic branch to the master</span><br></pre></td></tr></table></figure><p>Merge the current branch rebase onto the <code>master</code> branch.</p><p><img src="https://bingohuang.gitbooks.io/progit2/content/03-git-branching/images/interesting-rebase-3.png" alt="img"><br>Use rebase as shown in the <code>server</code> branch.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git rebase master</span><br></pre></td></tr></table></figure></p><p><img src="https://bingohuang.gitbooks.io/progit2/content/03-git-branching/images/interesting-rebase-4.png" alt="img"><br>As you can see, the new <code>c3&#39;</code>, <code>c4&#39;</code>, <code>c10&#39;</code> commits appear on the <code>master</code> branch. This means that changes to the file are submitted in accordance with c3 c4 c10, changes are made to the c9’ commit, and the <code>server</code> branch pointer is moved to the last c10’.</p><h3 id="7-7-1-–onto-Usage"><a href="#7-7-1-–onto-Usage" class="headerlink" title="7.7.1. –onto Usage"></a>7.7.1. –onto Usage</h3><p><img src="https://bingohuang.gitbooks.io/progit2/content/03-git-branching/images/interesting-rebase-1.png" alt="img"><br>If you use the command for this project:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git rebase --onto master server client</span><br></pre></td></tr></table></figure></p><p>Means: “Remove the client branch, find the modifications after the common ancestor of the client branch and the server branch, and then repeat them on the master branch.”</p><p>final effect:<br><img src="https://bingohuang.gitbooks.io/progit2/content/03-git-branching/images/interesting-rebase-2.png" alt="img"></p><h1 id="8-Undo-operation"><a href="#8-Undo-operation" class="headerlink" title="8. Undo operation"></a>8. Undo operation</h1><h2 id="8-1-git-commit-amend-Modify-the-last-commit"><a href="#8-1-git-commit-amend-Modify-the-last-commit" class="headerlink" title="8.1. git commit --amend Modify the last commit"></a>8.1. <code>git commit --amend</code> Modify the last commit</h2><p>After submitting, I found that I missed a file and did not submit it. What should I do?<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add forgotten_file</span><br><span class="line">$ git commit --amend</span><br></pre></td></tr></table></figure></p><p><code>--amend</code> means to modify the last commit and merge the current changes into the last commit, which is equivalent to patching the last commit.</p><h2 id="8-2-Deleting-files-from-the-staging-area"><a href="#8-2-Deleting-files-from-the-staging-area" class="headerlink" title="8.2. Deleting files from the staging area"></a>8.2. Deleting files from the staging area</h2><p>Modified the file, use <code>git add</code> to add the changes to the staging area, how to cancel the changes from the staging area?<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git reset HEAD FILENAME</span><br></pre></td></tr></table></figure></p><p>This command will delete the development file from the temporary storage area.</p><h2 id="8-3-Undoing-changes"><a href="#8-3-Undoing-changes" class="headerlink" title="8.3. Undoing changes"></a>8.3. Undoing changes</h2><p>I modified the file, but I regret it. I want to restore the file to what it was before.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git checkout -- FILENAME</span><br></pre></td></tr></table></figure></p><p>This command will ignore your modifications to the specified file and overwrite it from the last commit.<br><strong>This order is very dangerous</strong></p><h2 id="8-4-Recover-deleted-branches"><a href="#8-4-Recover-deleted-branches" class="headerlink" title="8.4. Recover deleted branches"></a>8.4. Recover deleted branches</h2><p>If you know the share-1 value of the commit that the branch originally points to, you only need to create a branch with the same name for the commit again.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git branch &lt;branch name&gt; &lt;the hash value of the commit pointed to by the branch&gt;</span><br></pre></td></tr></table></figure></p><p>If you don’t know share-1, use <code>reflog</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git reflog</span><br></pre></td></tr></table></figure></p><p>#远程仓库</p><p>Remote repository is a non-local and <strong> current repository does not matter </strong> another repository ** (in fact, the remote repository can also be local, as long as the repository is not related to the current repository is considered a remote repository)</p><p>Think of the current project repository and remote repository as two independent, unrelated repositorys will be better understood</p><p>There are many commits and branches in the local repository, and the remote repository can have no data. Unless you upload the specified data to a remote repository. The reverse is also the same.</p><p>If you want to associate a remote repository with a local repository, you need to use <code>git remote add</code></p><h2 id="Adding-a-remote-repository-to-a-project"><a href="#Adding-a-remote-repository-to-a-project" class="headerlink" title="Adding a remote repository to a project"></a>Adding a remote repository to a project</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git remote add origin git@github.com:xxx/xxxx.git</span><br></pre></td></tr></table></figure><h2 id="Reference-to-remote-repository"><a href="#Reference-to-remote-repository" class="headerlink" title="Reference to remote repository"></a>Reference to remote repository</h2><p>A remote repository has been added above with the address <a href="mailto:`git@github.com" target="_blank" rel="noopener">`git@github.com</a>:xxx/xxxx.git`.<br>To push data to this remote repository or to get the code in the repository is only needed<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git push git@github.com:xxx/xxxx.git</span><br></pre></td></tr></table></figure></p><p>This is to push the code to the specified remote repository, but it is too much trouble to enter the complete address each time, so we can give this address a unique name to remember, the place where the alias is specified is the one above.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git remote add origin git@github.com:xxx/xxxx.git</span><br></pre></td></tr></table></figure></p><p><code>origin</code> is an alias for remote repositories. Origin has no special meaning and can take any name. The origin is taken here simply because everyone is using this name, and it is also the default name of git, everyone is used to it. I am too lazy to change.</p><p>After defining the alias, referencing the remote repository and branch becomes<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Origin</span><br><span class="line">Origin/branch</span><br></pre></td></tr></table></figure></p><h2 id="fetch-Get-the-latest-information-on-remote-repositories"><a href="#fetch-Get-the-latest-information-on-remote-repositories" class="headerlink" title="fetch Get the latest information on remote repositories"></a><code>fetch</code> Get the latest information on remote repositories</h2><p>After the code is cloned from the remote repository, if someone updates the remote repository, the local remote repository commit code is old, you can get the latest code through <code>fetch</code>.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git fetch origin</span><br></pre></td></tr></table></figure></p><p>At this time we just grabbed the latest code data from the remote and did not apply the latest code to the working directory. To apply the code you need to use <code>merge</code> to merge the remote repository code** into the local.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git merge origin/master</span><br></pre></td></tr></table></figure><blockquote><p>Why not use <code>git checkout origin/master</code></p><p>If we use <code>git checkout origin/master</code>, since <code>origin/master</code> is a remote branch, it will not change. Because the remote branch is only pushed through <code>git push</code>. So the result is that if <code>checkout</code> is on <code>origin/master</code> and the update is submitted above, then this update will not be subordinate to any local branch, which will cause the commit to be lost after cutting to another place.</p></blockquote><p>Or create a local branch on the <code>origin/master</code> branch:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Git branch myb origin/master</span><br><span class="line">Git checkout myb</span><br><span class="line"></span><br><span class="line">Or</span><br><span class="line"></span><br><span class="line">Git -b myb origin/master</span><br></pre></td></tr></table></figure></p><p>This usage refers to the syntax created by the previous branch. This creates a local branch <code>myb</code> pointing to <code>origin/master</code> with the commit object.</p><h2 id="Tracking-branches-and-pull"><a href="#Tracking-branches-and-pull" class="headerlink" title="Tracking branches and pull"></a>Tracking branches and <code>pull</code></h2><p>Every time we update the code remotely, we have to fetch it down and then merge it with merge, which is very troublesome.</p><p>There is an easy way to do this all at once, that is, to associate a local branch with a remote branch. Getting data from the local branch is automatically merged.</p><h3 id="Tracking-branch"><a href="#Tracking-branch" class="headerlink" title="Tracking branch"></a>Tracking branch</h3><p>The local branch and remote branch association methods are the above<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Git branch myb origin/master</span><br><span class="line">Git checkout myb</span><br></pre></td></tr></table></figure></p><p>This local <code>myb</code> branch is associated with the remote <code>origin/master</code> branch.</p><p>Or can be simplified to<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git checkout --track origin/master</span><br></pre></td></tr></table></figure></p><p>The local <code>master</code> branch is automatically associated with the <code>origin/master</code> branch.<br>Change the remote branch associated with the local branch, using:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Git branch -u origin/dev</span><br><span class="line">Git branch --set-upstream-to origin/dev</span><br></pre></td></tr></table></figure></p><p>When the trace branch is set, it can be referenced by the <code>@{upstream}</code> or <code>@{u}</code> shortcut. </p><h4 id="List-tracking-information-for-all-branches"><a href="#List-tracking-information-for-all-branches" class="headerlink" title="List tracking information for all branches"></a>List tracking information for all branches</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git branch -vv</span><br></pre></td></tr></table></figure><h3 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a><code>git pull</code></h3><p><code>git pull</code> = <code>git fetch tracked branch</code> + <code>git merge tracked branch</code></p><h2 id="Push"><a href="#Push" class="headerlink" title="Push"></a>Push</h2><p>We don’t want to push all the branches and commits in the local repository to the remote repository when pushing.</p><p>So when you push, we have to specify what to push to the remote repository.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Git push remote repository <span class="built_in">local</span> branch name: remote branch name</span><br><span class="line"></span><br><span class="line">Git push origin master</span><br></pre></td></tr></table></figure><p>This code function is to push the local <code>mster</code> branch to the <code>master</code> branch of the <code>origin</code> remote repository.</p><p>If you want to customize the branch name of the remote repository<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git push origin master:lululu</span><br></pre></td></tr></table></figure></p><p>This is to push the local <code>mster</code> branch to the <code>lululu</code> branch of the <code>origin</code> remote repository.</p><h2 id="Deleting-branches-in-a-remote-repository"><a href="#Deleting-branches-in-a-remote-repository" class="headerlink" title="Deleting branches in a remote repository"></a>Deleting branches in a remote repository</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git push origin --delete serverfix</span><br></pre></td></tr></table></figure><p>Removed branch <code>serverfix</code> on the server</p><h2 id="Push-tab"><a href="#Push-tab" class="headerlink" title="Push tab"></a>Push tab</h2><p>By default, the <code>git push</code> command does not pass tags to the remote repository server. After creating the tag you must explicitly push the tag to the shared server.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Git push origin v1.5</span><br><span class="line"></span><br><span class="line">Git push origin --tags <span class="comment"># This will transfer all the tags that are not on the remote repository server.</span></span><br></pre></td></tr></table></figure></p><h2 id="Github-use"><a href="#Github-use" class="headerlink" title="Github use"></a>Github use</h2><h3 id="Create-ssh-key"><a href="#Create-ssh-key" class="headerlink" title="Create ssh key"></a>Create ssh key</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span></span><br></pre></td></tr></table></figure><p>After returning all the way, two files id_rsa and id_rsa.pub will be generated in the personal directory.</p><h3 id="Github-Add-ssh-public-key"><a href="#Github-Add-ssh-public-key" class="headerlink" title="Github Add ssh public key"></a>Github Add ssh public key</h3><p>In the github settings, paste the id_rsa.pub public key into it.</p><h3 id="Testing-ssh-links"><a href="#Testing-ssh-links" class="headerlink" title="Testing ssh links"></a>Testing ssh links</h3><p>Whenever git’s ssh link is used, the private key <code>id_rsa</code> private key in the <code>.ssh</code> directory is automatically called.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ssh -T git@github.com</span><br></pre></td></tr></table></figure></p><h1 id="9-Appendix"><a href="#9-Appendix" class="headerlink" title="9. Appendix"></a>9. Appendix</h1><h2 id="9-1-The-underlying-object"><a href="#9-1-The-underlying-object" class="headerlink" title="9.1. The underlying object"></a>9.1. The underlying object</h2><p>A Commit corresponds to a commit submission object. There are several small objects under this submission object.</p><p><img src="https://bingohuang.gitbooks.io/progit2/content/03-git-branching/images/commit-and-tree.png" alt="img"><br>As shown, a <code>commit</code> object contains a <code>tree</code> object to record the directory structure of the following file snapshot.</p><p>A <code>tree</code> object records a bunch of <code>blob</code> objects (the <code>blob</code> object is a file snapshot).</p><p>The above image is the first commit when creating the project, there is no parent <code>commit</code> object.</p><p>The commit after the first commit has a parent object, as shown in the figure:<br><img src="https://bingohuang.gitbooks.io/progit2/content/03-git-branching/images/commits-and-parents.png" alt="img"></p><h1 id="10-Others"><a href="#10-Others" class="headerlink" title="10. Others"></a>10. Others</h1><h2 id="git-ignore-specific-files"><a href="#git-ignore-specific-files" class="headerlink" title="git ignore specific files"></a>git ignore specific files</h2><p>Https://hiberabyss.github.io/2018/03/03/git-ignore-specific-file/</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;A simple tutorial for Git&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-Base-Information-Configuration&quot;&gt;&lt;a href=&quot;#1-Base-Information-Configuration&quot; class=&quot;headerlink&quot; title=&quot;1. Base Information Configuration&quot;&gt;&lt;/a&gt;1. Base Information Configuration&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Git config&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Go language learning note for C programer</title>
    <link href="http://yoursite.com/2019/04/09/Go-language-learning-Note/"/>
    <id>http://yoursite.com/2019/04/09/Go-language-learning-Note/</id>
    <published>2019-04-09T10:32:27.000Z</published>
    <updated>2019-04-09T10:58:57.184Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>This is a Go language learning note for C programer.</p><p>You can use this note to quickly learn Go.</p></blockquote><h1 id="1-Grammar"><a href="#1-Grammar" class="headerlink" title="1. Grammar"></a>1. Grammar</h1><h2 id="1-1-Constant"><a href="#1-1-Constant" class="headerlink" title="1.1. Constant"></a>1.1. Constant</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Const <span class="keyword">var</span> [TYPE] = xxx</span><br></pre></td></tr></table></figure><p>Const can not specify the type, it will be automatically judged at compile time.</p><p>Define multiple constants that can be written as one line<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Const Jan, Feb, Mar, App = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>Can also take the following form<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Const (</span><br><span class="line">Jan, Feb = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">Mar, App = <span class="number">3</span>, <span class="number">4</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>Combined enumeration<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Const (</span><br><span class="line">Jan = <span class="number">1</span></span><br><span class="line">Feb = <span class="number">2</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>If the enumeration is in the form of <code>0 1 2 3</code>, you can use <code>iota</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Const (</span><br><span class="line">Jan = <span class="literal">iota</span></span><br><span class="line">Feb</span><br><span class="line">Mar</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>Constants have no length limit, such as<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Const a = <span class="number">1.2321390234804823094802348238402340234092384204</span></span><br></pre></td></tr></table></figure></p><h2 id="1-2-Variables"><a href="#1-2-Variables" class="headerlink" title="1.2. Variables"></a>1.2. Variables</h2><p>Define the variable keyword as <code>var</code> format as<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Var name [TYPE] [= xxx]</span><br><span class="line">Such as:</span><br><span class="line">Var a <span class="keyword">int</span></span><br><span class="line">Var b float = <span class="number">19.8</span></span><br></pre></td></tr></table></figure></p><p>All memory is initialized in Go, so defining variables can not be assigned initial values. If the initial value is not assigned, the initial value of the corresponding type is assigned.</p><ul><li>int -&gt; 0</li><li>float -&gt; 0.0</li><li>bool -&gt; false</li><li>string -&gt; ‘’</li><li>pointer -&gt; nil</li></ul><p><strong>Note that it is an error to just declare a variable but not compile it with a variable. This is the embodiment of the idea that the go language does not need to be defined. But one exception is that global variables can be declared but not used</strong></p><p>If the compiler can determine the variable type based on the initial value when compiling, you can not specify the variable type, such as:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Var a = <span class="number">100</span></span><br><span class="line">Var hello = <span class="string">'nihao'</span></span><br><span class="line">Var HOME = os.Getenv(<span class="string">"HOME"</span>)</span><br></pre></td></tr></table></figure></p><p>But if the compiler can’t judge the format, it will report an error, such as<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Var a <span class="comment">// no initial value or no specified type</span></span><br></pre></td></tr></table></figure></p><p>As with constants, multiple variable declarations can be written as one line or as one-time assignments.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Var a, b, c, d <span class="keyword">int</span></span><br><span class="line">Var a, b, c, d = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span></span><br><span class="line"><span class="comment">// abcd is int type</span></span><br></pre></td></tr></table></figure></p><p>There is also a simple way to declare variables <code>:=</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a := 1</span><br><span class="line">b := false</span><br><span class="line">Name := &apos;bob&apos;</span><br></pre></td></tr></table></figure></p><p>Equivalent to <code>var a = 1</code></p><p>Of course, the declaration + assignment in a row is also easy to accomplish.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b, c, d := <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span></span><br></pre></td></tr></table></figure></p><p>If it has been declared, it can be batch-valued in a row like python.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b, c, d = <span class="number">200</span>, <span class="number">201</span>, <span class="number">202</span>, <span class="number">203</span></span><br></pre></td></tr></table></figure></p><p>This is similar to python’s unpack, called parallel assignment in go, which makes it easy to exchange variable values.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a, b := <span class="number">100</span>, <span class="number">200</span></span><br><span class="line">a, b = b, a <span class="comment">// a=200, b=100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// can also unpack the return value of the function</span></span><br><span class="line">a, b = func1()</span><br></pre></td></tr></table></figure></p><h3 id="1-2-1-variable"><a href="#1-2-1-variable" class="headerlink" title="1.2.1. _ variable"></a>1.2.1. <code>_</code> variable</h3><p>Go has a special variable <code>_</code>, which can be assigned the same value as an ordinary variable, but can’t get the value (that is, it can only be written, not readable)</p><p>The purpose of this variable is to discard some unneeded variables (because the variable definition in go must be used, otherwise it will report an error, but in fact some variables will not be used, such as the return value of the function)</p><p>Such as:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_, b = <span class="number">100</span>, <span class="number">200</span></span><br><span class="line">_, b = func1()</span><br></pre></td></tr></table></figure></p><h3 id="1-2-2-init-function"><a href="#1-2-2-init-function" class="headerlink" title="1.2.2. init() function"></a>1.2.2. <code>init()</code> function</h3><p>Go has a special function called <code>init()</code>, which cannot be called manually. It will be called automatically after the package has finished initializing. It can be used to initialize global variables.</p><p>The execution priority of this function is very high, even before <code>main()</code>, so one possible use is to verify or repair the data before starting the program to ensure the correctness of the program state.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Package trans</span><br><span class="line"></span><br><span class="line">Import <span class="string">"math"</span></span><br><span class="line"></span><br><span class="line">Var Pi <span class="keyword">float64</span></span><br><span class="line"></span><br><span class="line">Func init() &#123;</span><br><span class="line">   Pi = <span class="number">4</span> * math.Atan(<span class="number">1</span>) <span class="comment">// init() function computes Pi</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Or determine the type of operating system<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Func init() &#123;</span><br><span class="line">If runtime.GOOS == <span class="string">"windows"</span> &#123;</span><br><span class="line">Prompt = fmt.Sprintf(prompt, <span class="string">"Ctrl+Z, Enter"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">//Unix-like</span></span><br><span class="line">Prompt = fmt.Sprintf(prompt, <span class="string">"Ctrl+D"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="1-3-Pointer"><a href="#1-3-Pointer" class="headerlink" title="1.3. Pointer"></a>1.3. Pointer</h2><h3 id="1-3-1-Addressing-amp"><a href="#1-3-1-Addressing-amp" class="headerlink" title="1.3.1. Addressing &amp;"></a>1.3.1. Addressing &amp;</h3><p>Use &amp; to get the memory address corresponding to the variable<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a := <span class="number">100</span></span><br><span class="line">fmt.Print( &amp;a )</span><br></pre></td></tr></table></figure></p><h2 id="1-4-Types-and-operations"><a href="#1-4-Types-and-operations" class="headerlink" title="1.4. Types and operations"></a>1.4. Types and operations</h2><p><strong>Go is a strongly typed language that does not allow any form of implicit type conversion, such as binary operators that only allow two variables of the same type to be evaluated</strong></p><p>**Note: Int32 unt64 is also not allowed to perform operations without conversion.</p><p>But the constant limit is loose, such as:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Var a <span class="keyword">int64</span> = <span class="number">20</span></span><br><span class="line">a = a + <span class="number">10</span></span><br></pre></td></tr></table></figure></p><p>Because 10 is a constant written in the code, it will not compile error</p><h3 id="1-4-1-bool-type-and-operation"><a href="#1-4-1-bool-type-and-operation" class="headerlink" title="1.4.1. bool type and operation"></a>1.4.1. bool type and operation</h3><p>Go uses <code>false</code> <code>true</code> as the result of the bool operation<br>The logical connection symbol is the same as c:</p><ul><li>&amp;&amp; versus</li><li>|| or</li><li>!</li></ul><p>The comparison also has</p><ul><li><code>==</code> <code>!=</code> <code>&gt;</code> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">As with Python, when connecting multiple logical operations with `&amp;&amp;` `||`, if a condition can already produce the result of the entire operation, there is no need to calculate the following expression, such as:</span><br><span class="line">```go</span><br><span class="line">1&lt;100 || 2&gt; 400</span><br></pre></td></tr></table></figure></li></ul><p>Because <code>1&lt;100</code> is <code>true</code>, the result of the expression is <code>true</code>, and the following <code>2&gt;400</code> will not be executed.</p><h3 id="1-4-2-Number-Types-and-Operations"><a href="#1-4-2-Number-Types-and-Operations" class="headerlink" title="1.4.2. Number Types and Operations"></a>1.4.2. Number Types and Operations</h3><p>Integer:</p><ul><li><p><code>int</code> <code>uint</code> <code>uintptr</code>. </p><p>  These types are architecture-based, that is, the corresponding number of bits is automatically used depending on the environment in which they are run. On 32-bit systems, <code>int</code> uses <code>int32</code>, on 64-bit systems, <code>int</code> uses <code>int64</code>. <code>uintptr</code> is long enough to hold a pointer.</p></li><li><p><code>int8</code> <code>int16</code> <code>int32</code> <code>int64</code> <code>uint8</code> <code>uint16</code> <code>uint32</code> <code>uint64</code></p><p>  These are independent of the architecture and have a certain length.</p></li><li><p><code>byte</code> </p><p><code>byte</code> is actually <code>int8</code>, which is used to represent <code>ASCII</code> characters.</p></li></ul><p>plural: </p><p>Go native support plural</p><ul><li><code>complex64</code> (32-bit real number + 32-bit imaginary number)</li><li><p><code>complex128</code> (64-bit real number + 64-bit imaginary number)</p><p>  The plural definition i<code>I</code> in the form of <code>real + imi</code> represents the root number -1:</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Var c1 <span class="keyword">complex128</span> = <span class="number">1</span> + <span class="number">10i</span></span><br></pre></td></tr></table></figure><p>  To get the imaginary part of the real number of imaginary numbers, use <code>real()</code> <code>imag()</code></p></li></ul><p>floating point:</p><ul><li>float32 (accurate to 7 decimal places)</li><li><p>float64 (accurate to 15 decimal places)</p><p>  <strong>Because of the accuracy problem, be careful when comparing decimals</strong></p><p>  <strong> Also try to use <code>float64</code> because the math package is used for this </strong></p><blockquote><p><strong> divided by 0 </strong><br>Dividing an integer by 0 will cause a crash or the compilation will fail, and the floating point divided by 0 will get <code>+∞</code><br>Use <code>+Inf</code> for program</p></blockquote></li></ul><h4 id="1-4-2-1-Operation"><a href="#1-4-2-1-Operation" class="headerlink" title="1.4.2.1. Operation"></a>1.4.2.1. Operation</h4><p>Arithmetic operator: <code>+</code> <code>-</code> <code>*</code> <code>/</code> <code>%</code></p><p>At the same time, like c, it also supports: <code>++</code> <code>--</code> <code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>%=</code> </p><p><strong>note:</strong></p><p><code>++</code> <code>--</code> is self-increase and decrement, only acts on the variable itself, cannot be assigned, such as:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Var a = i++</span><br></pre></td></tr></table></figure></p><h3 id="1-4-3-Character-type"><a href="#1-4-3-Character-type" class="headerlink" title="1.4.3. Character type"></a>1.4.3. Character type</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Var a <span class="keyword">byte</span> = <span class="string">'A'</span></span><br></pre></td></tr></table></figure><p>Like <code>c</code>, go’s character type <code>byte</code> is actually just an alias for <code>int8</code> (<code>typeof byte int8</code>)</p><p>So you can use the corresponding ASCII value directly<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Var a <span class="keyword">byte</span> = <span class="number">32</span></span><br><span class="line">Var b <span class="keyword">int8</span> = <span class="number">33</span></span><br><span class="line">Var c <span class="keyword">byte</span> = <span class="string">'\x41'</span> <span class="comment">// \x followed by 2 digits expressed as hexadecimal value</span></span><br><span class="line">Var d <span class="keyword">byte</span> = <span class="string">'\x377'</span> <span class="comment">// \x followed by a 3-digit number as an octal value</span></span><br></pre></td></tr></table></figure></p><h4 id="1-4-3-1-Unicode-UTF-8"><a href="#1-4-3-1-Unicode-UTF-8" class="headerlink" title="1.4.3.1. Unicode( UTF-8 )"></a>1.4.3.1. <code>Unicode( UTF-8 )</code></h4><p>Go native support for unicode, starting with <code>\u</code> <code>\U</code></p><p>Because unicode requires multiple bytes to represent characters, the short one may be 2 bytes, the long pit is 4 bytes, corresponding to the specific <code>int</code> type is <code>int16</code> <code>int32</code>.</p><p>Which type is used specifically, by <code>\u</code> <code>\U</code>, <code>\u</code> is 2 bytes (<code>int16</code>), <code>\U</code> is 4 bytes (<code>int32</code>)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Var ch <span class="keyword">int</span> = <span class="string">'\u0041'</span> <span class="comment">//2 bytes unicode</span></span><br><span class="line">Var ch2 <span class="keyword">int</span> = <span class="string">'\U00101234'</span> <span class="comment">//4 bytes unicode</span></span><br></pre></td></tr></table></figure><p><strong>unicode output</strong></p><ul><li>%c output unicode characters</li><li>%d %v outputs the decimal value corresponding to the unicode code</li><li>%X output hexadecimal unicode code</li><li>%U outputs unicode code in <code>U+xxxx</code> format</li></ul><p><strong>unicode package</strong></p><p>There are some convenient methods in the unicode package:</p><ul><li>Is it a letter: unicode.IsLetter(ch)</li><li>Is it a number: unicode.IsDigit(ch)</li><li>Is it a blank symbol: unicode.IsSpace(ch)</li></ul><h3 id="1-4-4-In-hexadecimal"><a href="#1-4-4-In-hexadecimal" class="headerlink" title="1.4.4. In hexadecimal"></a>1.4.4. In hexadecimal</h3><p>Same as <code>c</code></p><ul><li><code>0</code> starts with octal    </li><li><code>0x</code> starts with hexadecimal</li><li><code>e</code> 10 nth power (1e5 = 1*10^5)</li></ul><h3 id="1-4-5-Bit-operation"><a href="#1-4-5-Bit-operation" class="headerlink" title="1.4.5. Bit operation"></a>1.4.5. Bit operation</h3><p>Can only be used for integers and needs to be equal in length.</p><ul><li><p>Bit &amp; &amp;</p><p>  And&amp; is similar to logical operation 1 is ture 0 is false</p></li><li><p>bit or |</p><p>  And logical operations || Similar 1 is true 0 is false</p></li><li><p>Bit XOR or ^</p><p>  The equality of the two results is 0, not equal to 1, such as:</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> ^ <span class="number">1</span> = <span class="number">0</span></span><br><span class="line"><span class="number">1</span> ^ <span class="number">0</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>Bit clear &amp;^ </p><p>  The value at the specified location is set to 0</p></li></ul><ul><li><p>Bit left shift &lt;&lt; Usage: <code>a &lt;&lt; n</code></p><p>  Indicates that <code>a</code> shifts the <code>n</code> bit to the left, the overflow is discarded, and the insufficient portion is filled with `0’.</p><blockquote><p><strong> Use of left shift</strong></p><p>Shift one bit by a considerable number of times by 2^1, and shifting the <code>n</code> bit to the left is equivalent to multiplying the number by 2^n.</p><p>The left shift operation speed is faster than the simple multiplication method, so when calculating a*2^n, it can be written as <code>a &lt;&lt; n</code></p></blockquote><p>  Because of this feature of left shift, you can quickly calculate the specific number of bytes of <code>KB</code> <code>MB</code> <code>GB</code> and so on:</p><ul><li>1KB = 1 * 2^10 can be written as <code>1 &lt;&lt; 10</code></li><li>1MB = 1 * 2^20 can be written as <code>1 &lt;&lt; 20</code></li><li>1GB = 1 * 2^30 can be written as <code>1 &lt;&lt; 30</code></li><li>TB PB and so on</li></ul></li><li><p>Bit right shift &gt;&gt; Usage: <code>a &gt;&gt; n</code></p><p>  Contrary to the left shift, shift n bits to the right. The same is the overflow part is discarded, the insufficient part is filled with <code>0</code><br>  The meaning is also opposite to the left shift. The left shift n bits is a*2^n, and the right shift is a/2^n.</p></li></ul><h3 id="1-4-6-Display-type-conversion"><a href="#1-4-6-Display-type-conversion" class="headerlink" title="1.4.6. Display type conversion"></a>1.4.6. Display type conversion</h3><p>By calling the method of the corresponding type, <code>int32()</code> <code>int64()</code> etc.<br>Such as:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Package main</span><br><span class="line"></span><br><span class="line">Import <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line">Func main() &#123;</span><br><span class="line">Var n <span class="keyword">int16</span> = <span class="number">34</span></span><br><span class="line">Var m <span class="keyword">int32</span></span><br><span class="line"></span><br><span class="line">m = <span class="keyword">int32</span>(n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Type conversion when defining:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a := <span class="keyword">uint64</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></p><h3 id="1-4-7-Operator-precedence"><a href="#1-4-7-Operator-precedence" class="headerlink" title="1.4.7. Operator precedence"></a>1.4.7. Operator precedence</h3><table><thead><tr><th>Priority</th><th>Operator</th></tr></thead><tbody><tr><td>7</td><td>^ !</td></tr><tr><td>6</td><td>* / % &lt;&lt; &gt;&gt; &amp; &amp;^</td></tr><tr><td>5</td><td>+ -</td><td>^</td></tr><tr><td>4</td><td>== != &lt; &lt;= &gt;= &gt;</td></tr><tr><td>3</td><td>&lt;-</td></tr><tr><td>2</td><td>&amp;&amp;</td><td></td></tr><tr><td>1</td><td>`</td><td></td><td>`</td></tr></tbody></table><h1 id="2-String"><a href="#2-String" class="headerlink" title="2. String"></a>2. String</h1><p>Like <code>c</code>, the string of go is also an array of characters.</p><p>Also supports transfer of strings <code>\n</code> <code>\r</code></p><p>However, unlike <code>c\c++</code>, the <code>go</code> string does not end with <code>\0</code>, but ends directly (this is similar to a dynamic language like <code>python</code>, the empty string is <code>&quot;&quot;</code>)</p><h2 id="2-1-Comparison-of-strings"><a href="#2-1-Comparison-of-strings" class="headerlink" title="2.1. Comparison of strings"></a>2.1. <strong>Comparison of strings</strong></h2><p><code>==</code> <code>&gt;</code> … etc. The operation is to achieve string comparison by byte comparison in memory.</p><h2 id="2-2-String-length"><a href="#2-2-String-length" class="headerlink" title="2.2. String length"></a>2.2. <strong>String length</strong></h2><p>String length (bytes) can be obtained by <code>len()</code></p><p>Unicode can have 1~4 bytes for a character. If you want to count the number of characters in utf-8, use <code>utf8.RuneCountInString() in the</code>unicode/utf-8` package.</p><h2 id="2-3-String-index-value"><a href="#2-3-String-index-value" class="headerlink" title="2.3. String index value"></a>2.3. <strong>String index value</strong></h2><p>Because the string of go is an array, you can get the character of the string by means of an array.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Str[<span class="number">0</span>]</span><br></pre></td></tr></table></figure></p><h2 id="2-4-String-splicing"><a href="#2-4-String-splicing" class="headerlink" title="2.4. String splicing +, +="></a>2.4. String splicing <code>+</code>, <code>+=</code></h2><p>Like <code>python</code>, <code>go</code> makes it easy to stitch strings.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Str := <span class="string">"hello"</span> + <span class="string">" world"</span></span><br><span class="line">Str += <span class="string">"!"</span></span><br></pre></td></tr></table></figure><p><strong>note</strong><br>Although the <code>+</code> splicing string is convenient, the efficiency is not very high. If you are splicing strings in a loop and have efficiency requirements, you can use the following methods:</p><ol><li><code>strings.Join()</code></li><li>Or use the buffer string <code>bytes.Buffer</code> like <code>c</code></li></ol><h2 id="2-5-strings-package"><a href="#2-5-strings-package" class="headerlink" title="2.5. strings package"></a>2.5. <code>strings</code> package</h2><p>The <code>strings</code> package contains some basic operations on strings.</p><ol><li><p>Does it start with xxx</p><p> <code>strings.HasPrefix(s, prefix)</code>  </p></li><li><p>Whether to end with xxx</p><p> <code>strings.HasSuffix(s, suffix)</code></p></li><li><p>Whether to include</p><p><code>strings.Contains(s, substr)</code></p></li><li><p>Find the substring position</p><p> <code>strings.Index(s, substr)</code>. This finds the location where it first appears. Return <code>-1</code> means not included<br> <code>strings.LastIndex(s, substr)</code>. This finds the last occurrence of the location. Return <code>-1</code> means not included</p></li></ol><h1 id="pointer"><a href="#pointer" class="headerlink" title="pointer"></a>pointer</h1><p>Like <code>c</code>, go can also define pointers, 32-bit system pointers are 32 bits long, and 64-bit systems are 64 bits.</p><p>But the pointer of go does not allow pointer arithmetic (such as ptr+1, ptr+2, will report an error. This is a bit like python, java pass reference)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Var p *<span class="keyword">int</span></span><br><span class="line">Var p*<span class="keyword">int</span> <span class="comment">// This is also legal, but it is not recommended, because in complex expressions, it is easy to be mistaken for multiplication</span></span><br></pre></td></tr></table></figure><h2 id="Addressing-operation-amp"><a href="#Addressing-operation-amp" class="headerlink" title="Addressing operation &amp;"></a>Addressing operation <code>&amp;</code></h2><p>Like <code>c</code>, you can get the memory address of a variable <code>&amp;a</code> by <code>&amp;</code>:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Var a = <span class="number">100</span></span><br><span class="line">Var bp *<span class="keyword">int</span> = &amp;a</span><br></pre></td></tr></table></figure></p><p><strong>note</strong></p><p><strong>Cannot get constant or text address</strong></p><h2 id="Value-operation"><a href="#Value-operation" class="headerlink" title="Value operation *"></a>Value operation <code>*</code></h2><p>Like <code>c</code>, use <code>*</code> in front of the pointer to get the pointer to the data in memory.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Var a = <span class="number">100</span></span><br><span class="line">Var bp *<span class="keyword">int</span> = &amp;a</span><br><span class="line">fmp.Print(*bp) <span class="comment">// output 100</span></span><br></pre></td></tr></table></figure></p><p>By the <code>*bp</code> operation, the value of the corresponding <code>a</code> variable can be changed.</p><h1 id="Contral"><a href="#Contral" class="headerlink" title="Contral"></a>Contral</h1><h2 id="Judging"><a href="#Judging" class="headerlink" title="Judging"></a>Judging</h2><h3 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">If condition &#123;</span><br><span class="line"><span class="comment">// The () symbol on both sides of the judgment condition can be omitted. If the condition is more complicated, it can be taken.</span></span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> condition &#123;</span><br><span class="line"><span class="comment">// else must be with the brackets&#125; consent level,</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// else&#123;</span></span><br><span class="line">/ / The above is not allowed by the <span class="keyword">go</span>, the compiler will report an error</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Or go has a way of writing, you can run an initialization statement first, and then judge, such as:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">If initialized; condition &#123;</span><br><span class="line"><span class="comment">// The variable defined in the initialization is a local variable, only in the entire if code block (including else)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>This can be used to get a one-time initial value.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">If value := func1(data); value &gt; <span class="number">100</span> &#123;</span><br><span class="line"> <span class="comment">// The value here is a local variable</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">If value, ok := readData(); ok&#123;</span><br><span class="line">Value <span class="comment">// operation on value</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>*<em><code>if</code> some useful ways</em></p><ol><li>Determine if the string is empty <code>if str == &quot;&quot;</code> or <code>if len(str)==0</code></li></ol><h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a><code>switch</code></h2><p>Same as <code>c</code>‘s `switch’<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Switch variable &#123;</span><br><span class="line">Case value <span class="number">1</span>:</span><br><span class="line"><span class="comment">// Unlike c, go will exit the entire switch block after executing a case.</span></span><br><span class="line"><span class="comment">// If you want to continue with c, you can use fallthrouth to execute to the next case.</span></span><br><span class="line">Fallthrough</span><br><span class="line"><span class="comment">//The code inside the switch does not need to use curly braces</span></span><br><span class="line"></span><br><span class="line">Case value <span class="number">2</span>: <span class="comment">// If the code has only one line, it can be written like this case like this</span></span><br><span class="line">Case value <span class="number">3</span>, value <span class="number">4</span>, value <span class="number">5</span>:</span><br><span class="line">/ / Can test multiple values ​​like this</span><br><span class="line"><span class="comment">// Manually jump out of the entire switch and use break like c</span></span><br><span class="line">Break</span><br><span class="line">Default:</span><br><span class="line"><span class="comment">// The position of defalut is actually indifferent. It doesn't matter where it is placed. But it is best to put the following</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>There is also a way to write <code>switch</code>, which is to provide variables for judgment. All judgments are done in <code>case</code>.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Switch &#123;</span><br><span class="line">Case value &lt;<span class="number">0</span>:</span><br><span class="line"><span class="comment">// code</span></span><br><span class="line">Case value == <span class="number">0</span>:</span><br><span class="line"><span class="comment">// code</span></span><br><span class="line">Case value &gt; <span class="number">0</span>:</span><br><span class="line"><span class="comment">//code</span></span><br><span class="line">Default:</span><br><span class="line"><span class="comment">//code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>This is actually the same as <code>if else if else</code>, but when there are a lot of <code>else if</code> conditions, the <code>switch</code> is more readable.</p><p><code>switch</code> The third way to write an initialization statement like <code>if</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Switch initialization &#123;</span><br><span class="line">Case val1:</span><br><span class="line">...</span><br><span class="line">Case val2:</span><br><span class="line">...</span><br><span class="line">Default:</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="for-loop"><a href="#for-loop" class="headerlink" title="for loop"></a>for loop</h2><p>The loop of go is only <code>for</code></p><h3 id="普通-Usage-Counter-iteration"><a href="#普通-Usage-Counter-iteration" class="headerlink" title="普通 Usage: Counter iteration"></a>普通 Usage: Counter iteration</h3><p>This is very similar to the <code>for</code> usage of <code>c</code>:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">For i:=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>But go also supports multiple counters<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">For i, j:=<span class="number">0</span>,N; i&lt;j, i,j=i+<span class="number">1</span>, j<span class="number">-1</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>###类<code>while</code> usage<br>When you don’t need to initialize variables, you can write <code>for</code> like you would write <code>while</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i := <span class="number">0</span></span><br><span class="line">For i&lt;<span class="number">100</span> &#123;</span><br><span class="line"><span class="comment">// Of course, like c, it is written as: for ;i&lt;100; &#123;&#125; is also possible</span></span><br><span class="line"><span class="comment">// However, this method will be corrected by gofmt to for i&lt;100</span></span><br><span class="line">i++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Infinite-loop"><a href="#Infinite-loop" class="headerlink" title="Infinite loop"></a>Infinite loop</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">For i:=<span class="number">0</span>;;i++&#123;</span><br><span class="line">If i&gt;<span class="number">100</span>&#123;</span><br><span class="line">Break</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In this way, there is no infinite loop, and it is necessary to judge when the program is launched inside the program.</p><p>Of course, it is okay to write <code>for true{}</code> directly. However, writing ‘for {}<code>directly at this time is the same meaning, equivalent to</code>for true{}`.</p><h3 id="for-range"><a href="#for-range" class="headerlink" title="for range"></a>for range</h3><p>It’s similar to looping on an iterator. But the difference is that you can get both idx and value</p><p><strong>Note: The value obtained for range is a copy of the corresponding value! Not a reference! Modifying the value cannot change the original value! </strong></p><p>Written as:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">For idx, value := <span class="keyword">range</span> ITEMS &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The more common usage is to iterate through the loop string (go’s string is unicode, but it can handle unicode characters correctly by range iteration)<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">For idx, char := <span class="keyword">range</span> <span class="string">"Hello"</span> &#123;</span><br><span class="line">fmt.Println(idx, char) <span class="comment">// Note that the direct print char output is the int value of the string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="goto"><a href="#goto" class="headerlink" title="goto"></a>goto</h3><p><strong> Never try to use goto! Because goto proved to be extremely bad code habits! </strong></p><p>Like c, goto can jump to the desired tag: note that goto can jump within the same function</p><h1 id="function"><a href="#function" class="headerlink" title="function"></a>function</h1><ul><li><code>go</code> is a compiled language, all functions are automatically found at compile time, so the definition and calling order of the function does not matter.</li><li><code>go</code> language<strong> does not allow function overloading</strong> (because the matching type procedure for function overloading consumes performance)</li><li>Unlike <code>c</code> <code>c#</code> and other languages, the <code>go</code> function supports returning multiple values. For example, a function that sends a message can return a message content object and a flag indicating whether the transmission was successful.</li><li><code>go</code> language does not provide default values ​​for formal parameters like <code>python</code>, and must provide the corresponding value each time.<br>Function declaration<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Func function name (parameter list) (<span class="keyword">return</span> value <span class="keyword">type</span> list) &#123;</span><br><span class="line"><span class="comment">// function body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>example<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Func add(a, b <span class="keyword">int</span>) (<span class="keyword">int</span>)&#123;</span><br><span class="line">Return a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Func add_2(a, b <span class="keyword">int</span>)(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>)&#123;</span><br><span class="line">Return a, b, a+b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Func fun1(a <span class="keyword">int</span>, _ <span class="keyword">int</span>) &#123;</span><br><span class="line"><span class="comment">// Function parameters can also be used _</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>If the return value list has only one return value, <code>()</code> can be omitted</p><p>If there is no return value, the return value list can be omitted</p><p>The function’s return value list can also be named like a formal parameter. The named variable is given the initial value. If you call <code>return</code>, there is no explicit return variable, it will automatically return the corresponding variable.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Func add(a, b <span class="keyword">int</span>)( return_a, return_b, result <span class="keyword">int</span>)&#123;</span><br><span class="line">Return_a = a</span><br><span class="line">Return_b = b</span><br><span class="line">Result = a+b</span><br><span class="line">Return</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>If you want to return multiple return values, you can use this method to make the reading point clearer.</p><h2 id="Passing-values-​​and-passing-references"><a href="#Passing-values-​​and-passing-references" class="headerlink" title="Passing values ​​and passing references"></a>Passing values ​​and passing references</h2><p>Like <code>c</code>, <code>go</code> passes the default value (that is, copy)</p><p>However, when a function is called, reference types such as slices, maps, interfaces, and channels are passed by reference by default (even if the pointer is not explicitly pointed out).</p><p>The pass reference is actually the memory address of the passed variable. The formal parameter defined by the function needs to receive the pointer type of the corresponding format. The operation data is also the same as the pointer:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Func multiply(a, b <span class="keyword">int</span>, reply *<span class="keyword">int</span>) &#123;</span><br><span class="line">    *reply = a * b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Calling this function is also a pass pointer:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Var reply *<span class="keyword">int</span></span><br><span class="line">Multiply(<span class="number">10</span>, <span class="number">5</span>, &amp;reply)</span><br></pre></td></tr></table></figure></p><h2 id="variable-length-parameter"><a href="#variable-length-parameter" class="headerlink" title="variable length parameter"></a>variable length parameter</h2><p>Wait for the array part to read and look back</p><h2 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h2><p>Defer is a bit like some language ‘finnaly`</p><p><code>defer</code> can register some operations. When the function’s <code>return</code> is called**, these operations will be executed. The common use is to close the file handle and so on.</p><p>The mechanism of <code>defer</code> is similar to the registration mechanism, so the location of <code>defer</code> in the function does not matter.</p><p><code>defer</code> can be used multiple times in the same function, the execution order is the same as the stack, last in, first out</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Func func1()&#123;</span><br><span class="line">i := <span class="number">0</span></span><br><span class="line">Defer close_file()</span><br><span class="line">i++</span><br><span class="line">Retrun</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Func func2()&#123;</span><br><span class="line">i := <span class="number">0</span></span><br><span class="line">Defer close_file1()</span><br><span class="line">Defer close_file2()</span><br><span class="line"><span class="comment">// return, execute in the order of close_file2() -&gt; close_file1()</span></span><br><span class="line">i++</span><br><span class="line">Retrun</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>defer</code> only supports one line. If you want to execute multiple statements, you can use anonymous functions:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Defer <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">log.Printf(<span class="string">"func1(%q) = %d, %v"</span>, s, n, err)</span><br><span class="line">log.Printf(<span class="string">"over"</span>)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">**defer application in debugging: enter, return tracking**</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Another common use of `</span><span class="keyword">defer</span><span class="string">` is to track the leaving function.</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="keyword">go</span></span><br><span class="line">Func leave(s <span class="keyword">string</span>)&#123; fmt.Println(<span class="string">"Leave function: "</span>,s)&#125;</span><br><span class="line">Func enter(s <span class="keyword">string</span>)&#123; fmt.Println(<span class="string">"You entered the function: "</span>, s)&#125;</span><br><span class="line">Func func1()&#123;</span><br><span class="line">Enter(<span class="string">"func1"</span>)</span><br><span class="line">Defer leave(<span class="string">"func1"</span>)</span><br><span class="line"><span class="comment">// some operations</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>For example, if you write “enter”, you can write the above content more concisely:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Func enter(s <span class="keyword">string</span>) <span class="keyword">string</span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"You entered the function: "</span>, s)</span><br><span class="line">Return s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>In this way, entry and registration can be simplified to<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Defer leave( enter(<span class="string">"func1"</span>) )</span><br></pre></td></tr></table></figure></p><p><strong>defer application in debugging: output record parameters and return value</strong></p><p>The same reason~</p><h2 id="recursion"><a href="#recursion" class="headerlink" title="recursion"></a>recursion</h2><p>Don’t like recursion~ look again</p><h2 id="Callback-callback"><a href="#Callback-callback" class="headerlink" title="Callback (callback)"></a>Callback (callback)</h2><p>Passing a function as a parameter to another function call is called <strong>callback</strong> (callback)</p><p>The formal parameter of the receiving function, the type uses <code>func (parameter list) to return the list</code>representation, such as<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Func callback( f <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span> <span class="title">int</span> )</span>&#123;</span><br><span class="line">Return f(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The call is also very simple, just pass in the function name directly into it:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Func A(a, b <span class="keyword">int</span>) <span class="keyword">int</span>&#123;</span><br><span class="line">Return a+b</span><br><span class="line">&#125;</span><br><span class="line">Callback( A )</span><br></pre></td></tr></table></figure></p><p>An example of <code>callback</code> is the <code>IndexFunc</code> in the string package.<br>The definition of <code>IndexFunc</code> is:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Func IndexFunc(s <span class="keyword">string</span>, f <span class="function"><span class="keyword">func</span><span class="params">(c <span class="keyword">int</span>)</span> <span class="title">bool</span>) <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">//... internally get the characters of string, then call f(c) to get the corresponding result</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>So just write a judgment function with the corresponding formal parameters and return value:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Func func1(c <span class="keyword">int</span>) <span class="keyword">bool</span>&#123;</span><br><span class="line">If c==<span class="string">'A'</span>&#123;</span><br><span class="line">Return <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">Return <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Anonymous-function"><a href="#Anonymous-function" class="headerlink" title="Anonymous function"></a>Anonymous function</h2><p>Functions without names are called anonymous functions. as follows:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Func (i <span class="keyword">int</span>) <span class="keyword">int</span> &#123;</span><br><span class="line">Return i*<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Anonymous functions cannot exist alone, otherwise compilation errors will be reported, but anonymous functions can be called directly.</p><p>By writing parentheses to the right of the braces</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a := <span class="function"><span class="keyword">func</span> <span class="params">(i <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">Return i*<span class="number">2</span></span><br><span class="line">&#125;(<span class="number">10</span>)</span><br><span class="line"><span class="comment">// Here is the formal parameter 10, and the function return value is assigned to the variable a</span></span><br></pre></td></tr></table></figure><p>An anonymous function can also be assigned to a variable, after which the variable can be called like a function.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Func1 := <span class="function"><span class="keyword">func</span> <span class="params">(i <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">Return i*<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a := func1(<span class="number">100</span>)</span><br></pre></td></tr></table></figure></p><h3 id="Closure"><a href="#Closure" class="headerlink" title="Closure"></a>Closure</h3><p>Since an anonymous function can be assigned to a variable, it can naturally be returned as the return value of another function.</p><p>One usage is to pass in different variables, use another function to generate new functions with different functions and return them as return values.</p><p>This function that returns a function is called a factory function.</p><p>As follows, it is a factory function that generates different suffixes:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Func MakeAddSuffix(suffix <span class="keyword">string</span>) <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"></span><br><span class="line">Return <span class="function"><span class="keyword">func</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">If !strings.HasSuffix(name, suffix) &#123;</span><br><span class="line">Return name + suffix</span><br><span class="line">&#125;</span><br><span class="line">Return name</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Usage is as follows<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">addBmpSuffix := MakeAddSuffix(<span class="string">".bmp"</span>)</span><br><span class="line">Newfilename = addBmpSuffix(<span class="string">"testfile"</span>) <span class="comment">// newfilename = 'testfile.bmp'</span></span><br></pre></td></tr></table></figure></p><p>The returned function directly uses the variable <code>suffix</code> in the <code>MakeAddSuffix</code> function, which is called a closure.</p><p>#Array and slice</p><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><p><strong>The length of the array is deterministic, the length of the array must be constant</strong></p><p><strong> Each element is initialized to the initial value of the corresponding type when the array is defined</strong></p><p>Array definition and initialization:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Var array1 [<span class="number">10</span>]<span class="keyword">int</span></span><br><span class="line"><span class="comment">// only defined, initialized by type defaults</span></span><br></pre></td></tr></table></figure></p><p>If you want to initialize when defining, use the form <code></code>3’int{1, 3, 5}<code>.</code>[3]int{1, 3, 5}` returns an array of length 3, content 1, 2, 3, which can be assigned to a variable:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/ / Define simultaneous initialization</span><br><span class="line">Var arrayAge = [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>&#125; <span class="comment">// known length is 5, all initialized</span></span><br><span class="line">Var arrayAge = [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">19</span>&#125; <span class="comment">// length 5, only initialize the first one</span></span><br><span class="line">Var arrayAge = [...]<span class="keyword">int</span>&#123;<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>&#125; <span class="comment">//Define an array of length 5 and initialize all</span></span><br><span class="line"></span><br><span class="line">Var arrayAge = [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">0</span>:<span class="number">19</span>, <span class="number">4</span>:<span class="number">23</span>&#125; <span class="comment">// Specify values ​​only for [0] and [4]</span></span><br><span class="line"></span><br><span class="line">Var arrayAgePtr = <span class="built_in">new</span>([<span class="number">10</span>]<span class="keyword">int</span>) <span class="comment">// This is similar to the way c++ is defined, but note that this method returns not the value of the array, but a pointer to the array.</span></span><br></pre></td></tr></table></figure></p><p>Like <code>c</code>, the array starts with <code>0</code> and the following index value</p><p>Different from <code>c</code></p><ul><li>If the reference is outside the length range, the compiler will report an error or throw an error when it runs.</li><li>The array in <code>go</code> is a <code>value</code>, not a pointer to a memory like <code>c</code></li><li>The type of the array is not followed by member variables. For example, <code>[10]int</code> and <code>[5]int</code> are different array types.</li></ul><h3 id="Array-pass-value"><a href="#Array-pass-value" class="headerlink" title="Array pass value"></a>Array pass value</h3><p>The array in <strong><code>go</code> is a <code>value</code>, not a pointer to a piece of memory like <code>c</code></strong></p><p>So, when you assign an array from one variable to another, a <strong>copy</strong> occurs, as follows:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Array1 := [<span class="number">4</span>]<span class="keyword">int</span></span><br><span class="line">Array2 := array1</span><br><span class="line">Array2[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// array1 [0 0 0 0]</span></span><br><span class="line"><span class="comment">// array2 [100 0 0 0]</span></span><br></pre></td></tr></table></figure></p><p>If you want to modify the value of an array, use the <code>address</code> operator <code>&amp;</code>:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Array1 := [<span class="number">4</span>]<span class="keyword">int</span></span><br><span class="line">Array2 := &amp;array1</span><br><span class="line">Array2[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// array1 &amp;[0 0 0 0]</span></span><br><span class="line"><span class="comment">// array2 &amp;[100 0 0 0]</span></span><br></pre></td></tr></table></figure></p><p><strong>note</strong></p><p>Because of the nature of the <code>go</code> array, the function parameter is also a copy of the received array. If you want to change the array, you need to define the parameter like the receive pointer:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Func func1(array1 *[<span class="number">10</span>]<span class="keyword">int</span>)&#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>But in fact <code>go</code> is not commonly used this way, for arrays such things, <code>go</code> has a more flexible <code>slice</code> to perform the corresponding operations instead of arrays.</p><h3 id="Array-Traversal"><a href="#Array-Traversal" class="headerlink" title="Array Traversal"></a>Array Traversal</h3><p>Since the array traversal is using <code>for</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// General way of writing</span></span><br><span class="line">For i:=<span class="number">0</span>; i&lt;<span class="built_in">len</span>(array1); i++&#123;</span><br><span class="line">Array1[i] <span class="comment">//.....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/ / Use <span class="keyword">for</span> <span class="keyword">range</span> </span><br><span class="line">For idx, value := <span class="keyword">range</span> array1 &#123;</span><br><span class="line">Value <span class="comment">// the value of for range is just a copy, the original value cannot be modified, so it is best to use idx</span></span><br><span class="line">Array1[idx]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Array-application-vector"><a href="#Array-application-vector" class="headerlink" title="Array application: vector"></a>Array application: vector</h3><p>Geometric points (or mathematical vectors) are a classic example of using arrays. To simplify the code you usually use an alias:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Type Vector3D [<span class="number">3</span>]<span class="keyword">float32</span></span><br><span class="line">Var vec Vector3D</span><br></pre></td></tr></table></figure></p><h2 id="Multidimensional-Arrays"><a href="#Multidimensional-Arrays" class="headerlink" title="Multidimensional Arrays"></a>Multidimensional Arrays</h2><p>The same feeling as <code>c</code>:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Var a [<span class="number">2</span>][<span class="number">2</span>]<span class="keyword">int</span></span><br><span class="line">Var a = [<span class="number">2</span>][<span class="number">2</span>]<span class="keyword">int</span>&#123; &#123;<span class="number">1</span>,<span class="number">2</span>&#125;, &#123;<span class="number">4</span>,<span class="number">5</span>&#125; &#125;</span><br></pre></td></tr></table></figure></p><h2 id="Slice"><a href="#Slice" class="headerlink" title="Slice"></a>Slice</h2><p>The <code>go</code> slice concept is greatly influenced by <code>python</code>, which is very similar to the <code>python</code> slice.</p><p>But the difference is that the <code>go</code> slice is a <code>reference</code> to the original array, and <code>python</code> is a <code>copy</code>.</p><p>So if you want to pass the array and modify it in <code>go</code>, it is best to pass the <code>slice</code> of this array directly.</p><p><strong>Slice type</strong></p><p><code>[10]int</code> This is an array type</p><p>If there is no length, it is the type of slice: <code>[]TYPE</code> , such as: <code>[]int</code>, <code>[]string</code></p><h3 id="Creating-a-slice"><a href="#Creating-a-slice" class="headerlink" title="Creating a slice"></a>Creating a slice</h3><p>The following creates an empty slice, <code>nil</code>, with a length of <code>0</code>, which can be assigned to any slice of type <code>[]int</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/ / Directly define an empty slice variable slice of <span class="keyword">type</span> [] <span class="keyword">int</span></span><br><span class="line">Var slice []<span class="keyword">int</span></span><br></pre></td></tr></table></figure></p><p>The following creates an array and puts a slice at the same time:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// First create an array of [5]ints, then return a slice pointing to this array</span></span><br><span class="line">Slice := []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure></p><p>The following creates a slice, <code>slice1</code> slice length is <code>end-start</code> (3-1=2), contains the data of the <code>start</code> position, but does not contain the data of the <code>end</code> position.</p><p>The second <code>slice2</code> contains the entire array.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create a slice from an array</span></span><br><span class="line">Var array1 [<span class="number">5</span>]<span class="keyword">int</span> </span><br><span class="line">Slice1 := array1[<span class="number">1</span>:<span class="number">3</span>] <span class="comment">// Create a slice of type []int</span></span><br><span class="line">Slice2 := array1[:] <span class="comment">// start does not write to start, end does not write to end</span></span><br></pre></td></tr></table></figure><p>Because the slice contains <code>start</code> without the <code>end</code> feature, it makes:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Array1 == ( array1[:i] + array1[i:] )</span><br></pre></td></tr></table></figure></p><p>Let’s create a slice with <code>make()</code> below.</p><p>The <code>make()</code> creation slice is <code>make(TYPE, len, cap )</code>. The principle is to create an array and then return the slice created from this array.</p><p><strong>Note</strong>: <code>make</code> can only be used to generate <code>slice</code>, <code>map</code>, <code>channel</code>. And <code>new</code> is used to create <code>all value types</code> (<code>array</code>, <code>structure</code>, <code>int</code>, etc.), and new returns <code>pointer</code>.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Slice3 = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">50</span>, <span class="number">100</span>)</span><br><span class="line"><span class="comment">// First create an array of length 100, then return the slice of [0:50] to slice3</span></span><br></pre></td></tr></table></figure></p><h3 id="Sliced-​​capacity-cap-and-slice-recombination-reslice"><a href="#Sliced-​​capacity-cap-and-slice-recombination-reslice" class="headerlink" title="Sliced ​​capacity cap and slice recombination reslice"></a>Sliced ​​capacity <code>cap</code> and slice recombination <code>reslice</code></h3><p><code>cap</code> refers to the length of the <code>start</code> position of the slice, to the total length of the <code>end</code> position of the original array. Such as:<br><code>var array1 [10]int</code> <code>slice := array[1:3]</code> , the length of slice <code>slice1</code> is <code>3-1=2</code>, <code>capacity(cap)</code> is <code>original array length 10 - slice start Position 1 = 9</code></p><p>Since the <code>capacity&#39; of the slice is larger than the</code>slice length<code>, the above</code>slice1<code>can be expanded. This is different from the slice of</code>python`:</p><p>The <code>slice1</code> above is <code>2</code>, which points to the <code>[1] [2]</code> position of the original array.</p><p>Then change the length of the slice with the following code:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Slice2 = slice1[<span class="number">0</span>:<span class="number">1</span>]</span><br><span class="line">Slice1 = slice1[<span class="number">0</span>:<span class="number">3</span>]</span><br></pre></td></tr></table></figure></p><p>The new slice <code>slice1</code> points to the <code>[1] [2] [3]</code> position of the original array</p><p><code>slice2</code> is reduced to <code>[1]</code></p><p>Not only can you change the slice’s <code>end</code> to expand, but you can also change the <code>start</code> to change the position:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Slice1 := slice[<span class="number">1</span>:<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>Slice1 changes from the original <code>[1] [2]</code> to the `[2] [3] pointing to the original array.</p><h1 id="3-Basic-functions"><a href="#3-Basic-functions" class="headerlink" title="3. Basic functions"></a>3. Basic functions</h1><h2 id="3-1-Print-Println-Printf-Sprintf"><a href="#3-1-Print-Println-Printf-Sprintf" class="headerlink" title="3.1. Print Println Printf Sprintf"></a>3.1. Print Println Printf Sprintf</h2><p><code>Println</code> will automatically bring \n at the end, <code>Print</code> will not<br>If you want to use %d %f for formatted output like C, use <code>Printf</code>.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Printf(<span class="string">"Hello, %v, a is %v"</span>, name, a)</span><br></pre></td></tr></table></figure></p><p>%v can automatically call the corresponding formatted output mode according to the variable type<br>You can manually specify %d %f, etc.</p><p><code>Sprintf</code> returns the string as a function return value, not output</p><p>Specific list</p><ul><li><code>%v</code> automatically calls the output mode of the corresponding format</li><li><code>%d</code> integer, if you want to specify the length, use <code>%2d</code> similar to c</li><li><code>%x</code> <code>%X</code> hex</li><li><code>%g</code> floats retain decimals like c, <code>%n.2g</code></li><li><code>%f</code> <code>%e</code> floating point number (the latter is output in the form of e)</li></ul><h2 id="3-2-Random-number"><a href="#3-2-Random-number" class="headerlink" title="3.2. Random number"></a>3.2. Random number</h2><p>The <code>rand</code> package implements the generation of pseudo-random numbers.</p><ul><li>You can use the Seed(value) function to provide a seed for generating pseudo-random numbers.</li><li>The function <code>rand.Intn</code> returns a pseudo-random number between [0, n)</li><li>The functions <code>rand.Float32</code> and <code>rand.Float64</code> return pseudo-random numbers between [0.0, 1.0)</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Package main</span><br><span class="line">Import (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">Func main() &#123;</span><br><span class="line">For i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">a := rand.Int()</span><br><span class="line">fmt.Printf(<span class="string">"%d / "</span>, a)</span><br><span class="line">&#125;</span><br><span class="line">For i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">r := rand.Intn(<span class="number">8</span>)</span><br><span class="line">fmt.Printf(<span class="string">"%d / "</span>, r)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line"><span class="comment">// Set the seed here, using the current nanosecond</span></span><br><span class="line">Timens := <span class="keyword">int64</span>(time.Now().Nanosecond())</span><br><span class="line">rand.Seed(timens)</span><br><span class="line">For i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%2.2f / "</span>, <span class="number">100</span>*rand.Float32())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">816681689</span> / <span class="number">1325201247</span> / <span class="number">623951027</span> / <span class="number">478285186</span> / <span class="number">1654146165</span> /</span><br><span class="line"><span class="number">1951252986</span> / <span class="number">2029250107</span> / <span class="number">762911244</span> / <span class="number">1372544545</span> / <span class="number">591415086</span> / / <span class="number">3</span> / <span class="number">0</span> / <span class="number">6</span> / <span class="number">4</span> / <span class="number">2</span> /<span class="number">22.10</span></span><br><span class="line">/ <span class="number">65.77</span> / <span class="number">65.89</span> / <span class="number">16.85</span> / <span class="number">75.56</span> / <span class="number">46.90</span> / <span class="number">55.24</span> / <span class="number">55.95</span> / <span class="number">25.58</span> / <span class="number">70.61</span> /</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;This is a Go language learning note for C programer.&lt;/p&gt;
&lt;p&gt;You can use this note to quickly learn Go.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-Grammar&quot;&gt;&lt;a href=&quot;#1-Grammar&quot; class=&quot;headerlink&quot; title=&quot;1. Grammar&quot;&gt;&lt;/a&gt;1. Grammar&lt;/h1&gt;&lt;h2 id=&quot;1-1-Constant&quot;&gt;&lt;a href=&quot;#1-1-Constant&quot; class=&quot;headerlink&quot; title=&quot;1.1. Constant&quot;&gt;&lt;/a&gt;1.1. Constant&lt;/h2&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Const &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; [TYPE] = xxx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Const can not specify the type, it will be automatically judged at compile time.&lt;/p&gt;
&lt;p&gt;Define multiple constants that can be written as one line&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Const Jan, Feb, Mar, App = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[安全のしおり] WEP Wifiのパスワードをハッキングする</title>
    <link href="http://yoursite.com/2018/01/09/%E5%AE%89%E5%85%A8%E3%81%AE%E3%81%97%E3%81%8A%E3%82%8A-Wifi-%E3%83%91%E3%82%B9%E3%83%AF%E3%83%BC%E3%83%89%E3%83%8F%E3%83%83%E3%82%AD%E3%83%B3%E3%82%B0/"/>
    <id>http://yoursite.com/2018/01/09/安全のしおり-Wifi-パスワードハッキング/</id>
    <published>2018-01-09T13:14:14.000Z</published>
    <updated>2019-04-09T15:24:45.630Z</updated>
    
    <content type="html"><![CDATA[<p>Wifiのセキュリティはいつも安全ではありません。</p><p>例えば、以前に使った<em>WEP</em>認証方式は既に潰れています。かなり複雑なwifiパスワードを設定しても、<em>WEP</em>認証方式を採用したら、wifiは簡単にハッキングされます。</p><p>現在、新しい無線ルーターはもう<em>WEP</em>を採用しませんが、古いルーターはまだ<em>WEP</em>採用しています。</p><p>巳を知り彼を知らば、百戦殆うからず。今回私は自分のルーターを例として、wifiパスワードをハッキングしてみます。<br><a id="more"></a></p><h1 id="ツール"><a href="#ツール" class="headerlink" title="ツール"></a>ツール</h1><ul><li><p><a href="https://www.aircrack-ng.org/" target="_blank" rel="noopener">Aircrack-ng</a></p><p>  かなり有名な、Wifiをハッキングするツールです。</p></li><li><p><a href="https://www.kali.org/" target="_blank" rel="noopener">Kali Linux</a></p><p>250を超えるペネトレーションテストソフトウェアがインストールされているLinuxディストリビューションです。その中に<code>Aircrack-ng</code>も含まれています。<code>Aircrack-ng</code>を使いたいなら、このlinuxを勧めます。</p></li></ul><h1 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h1><ol><li>まずは<a href="https://www.kali.org/downloads/" target="_blank" rel="noopener">Kali Linux</a>をダウンロードします</li><li>次に<a href="https://docs.kali.org/downloading/kali-linux-live-usb-install" target="_blank" rel="noopener">HPの手順</a>に従って、Kali LinuxをUSBに入れます</li><li>パソコンのBIOSを設定し、Kali Linuxが存在しているUSBから<code>Live CD</code>の方式でKali Linuxを起動する。</li><li>rootアカウントのパスワードは<code>toor</code></li></ol><h1 id="ハッキングを始める"><a href="#ハッキングを始める" class="headerlink" title="ハッキングを始める"></a>ハッキングを始める</h1><ol><li><p>まずは文字端末を起動し、<code>iwconfig</code>で自分のパソコンのネットワークカードの名前を判明します。私の場合、ネットワークカードの名前は<code>wlan0</code>です。</p><p> <img src="1.png" alt></p></li><li><p>次に、<code>airmon-ng start wlan0</code>で、ネットワークカードを<code>Monitorモード</code>に切り替えます。</p></li></ol><ol start="3"><li><p>もう一回<code>iwconfig</code>を実行する。ネットワークカードはもう<code>Monitorモード</code>になりました。そして、ネットワークカードの名前は<code>wlan0mon</code>になりました。</p><p> <img src="2.png" alt></p></li><li><p><code>airodump-ng wlan0mon</code>を実行し、ハッキングしたい<code>wifi</code>を探します</p><p> <img src="3.png" alt></p><p> この中に、一番大事なデータは<code>BSSID</code>と<code>CH</code>(wifiが使ってるChannel)です。ハッキングしたい<code>wifi</code>の<code>BSSID</code>と<code>CH</code>を記録します。</p></li></ol><ol start="5"><li><p>下のコマンドで、ハッキングしたいwifiの通信データを収集する</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airodump-ng  -w データの保存先 --channel 上のAPのCH --bssid 上のBSSID  wlan0mon</span><br></pre></td></tr></table></figure><p> 図の解説：上部はハッキングしたいwifi(AP)の情報です。下部はそのwifi(AP)につながってるデバイスのリストです（STATIONはつまりデバイスのMAC ADRESSです）</p><p> <img src="4.png" alt><br> 収集の作業は自動に行います。データをいっぱい集めたら（大体2万～十何万が必要です）、次のパスワードハッキング作業に進みます。</p></li></ol><p>6.　<code>aircrack-ng データファイル</code>でパスワードをハッキングします。収集したデータ量は多いなら、wifiパスワードはすぐにでます。<br>    <img src="6.png" alt>   </p><h1 id="結言"><a href="#結言" class="headerlink" title="結言"></a>結言</h1><p><em>WEP</em>認証方式はもうかなり不安全ですので、絶対に<em>WEP</em>を使わないでください。</p><p>今回私は情報安全を勉強するため、自分のWifiをハッキングしました。</p><p>しかし、他人のwifiをハッキングするのは法律違反です。絶対にこの方法を悪用しないでください。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Wifiのセキュリティはいつも安全ではありません。&lt;/p&gt;
&lt;p&gt;例えば、以前に使った&lt;em&gt;WEP&lt;/em&gt;認証方式は既に潰れています。かなり複雑なwifiパスワードを設定しても、&lt;em&gt;WEP&lt;/em&gt;認証方式を採用したら、wifiは簡単にハッキングされます。&lt;/p&gt;
&lt;p&gt;現在、新しい無線ルーターはもう&lt;em&gt;WEP&lt;/em&gt;を採用しませんが、古いルーターはまだ&lt;em&gt;WEP&lt;/em&gt;採用しています。&lt;/p&gt;
&lt;p&gt;巳を知り彼を知らば、百戦殆うからず。今回私は自分のルーターを例として、wifiパスワードをハッキングしてみます。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
